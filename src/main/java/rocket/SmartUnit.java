/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rocket;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-29")
public class SmartUnit {

  public interface Iface {

    public Task parse(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros) throws org.apache.thrift.TException;

    public Task testcase_gen(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros) throws org.apache.thrift.TException;

    public Task testcase_run(String project_id, String version_id, String branch_id, String tester_id, java.util.List<Testcase> testcases, java.util.List<String> headers, java.util.List<Macro> macros) throws org.apache.thrift.TException;

    public int license_register(String license) throws org.apache.thrift.TException;

    public License license_query() throws org.apache.thrift.TException;

    public java.util.List<Task> task_query(String task_id) throws org.apache.thrift.TException;

    public Task task_pause(String task_id) throws org.apache.thrift.TException;

    public Task task_resume(String task_id) throws org.apache.thrift.TException;

    public Task task_cancel(String task_id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void parse(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException;

    public void testcase_gen(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException;

    public void testcase_run(String project_id, String version_id, String branch_id, String tester_id, java.util.List<Testcase> testcases, java.util.List<String> headers, java.util.List<Macro> macros, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException;

    public void license_register(String license, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException;

    public void license_query(org.apache.thrift.async.AsyncMethodCallback<License> resultHandler) throws org.apache.thrift.TException;

    public void task_query(String task_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Task>> resultHandler) throws org.apache.thrift.TException;

    public void task_pause(String task_id, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException;

    public void task_resume(String task_id, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException;

    public void task_cancel(String task_id, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Task parse(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros) throws org.apache.thrift.TException
    {
      send_parse(project_id, version_id, branch_id, tester_id, files, headers, macros);
      return recv_parse();
    }

    public void send_parse(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros) throws org.apache.thrift.TException
    {
      parse_args args = new parse_args();
      args.setProject_id(project_id);
      args.setVersion_id(version_id);
      args.setBranch_id(branch_id);
      args.setTester_id(tester_id);
      args.setFiles(files);
      args.setHeaders(headers);
      args.setMacros(macros);
      sendBase("parse", args);
    }

    public Task recv_parse() throws org.apache.thrift.TException
    {
      parse_result result = new parse_result();
      receiveBase(result, "parse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "parse failed: unknown result");
    }

    public Task testcase_gen(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros) throws org.apache.thrift.TException
    {
      send_testcase_gen(project_id, version_id, branch_id, tester_id, files, headers, macros);
      return recv_testcase_gen();
    }

    public void send_testcase_gen(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros) throws org.apache.thrift.TException
    {
      testcase_gen_args args = new testcase_gen_args();
      args.setProject_id(project_id);
      args.setVersion_id(version_id);
      args.setBranch_id(branch_id);
      args.setTester_id(tester_id);
      args.setFiles(files);
      args.setHeaders(headers);
      args.setMacros(macros);
      sendBase("testcase_gen", args);
    }

    public Task recv_testcase_gen() throws org.apache.thrift.TException
    {
      testcase_gen_result result = new testcase_gen_result();
      receiveBase(result, "testcase_gen");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testcase_gen failed: unknown result");
    }

    public Task testcase_run(String project_id, String version_id, String branch_id, String tester_id, java.util.List<Testcase> testcases, java.util.List<String> headers, java.util.List<Macro> macros) throws org.apache.thrift.TException
    {
      send_testcase_run(project_id, version_id, branch_id, tester_id, testcases, headers, macros);
      return recv_testcase_run();
    }

    public void send_testcase_run(String project_id, String version_id, String branch_id, String tester_id, java.util.List<Testcase> testcases, java.util.List<String> headers, java.util.List<Macro> macros) throws org.apache.thrift.TException
    {
      testcase_run_args args = new testcase_run_args();
      args.setProject_id(project_id);
      args.setVersion_id(version_id);
      args.setBranch_id(branch_id);
      args.setTester_id(tester_id);
      args.setTestcases(testcases);
      args.setHeaders(headers);
      args.setMacros(macros);
      sendBase("testcase_run", args);
    }

    public Task recv_testcase_run() throws org.apache.thrift.TException
    {
      testcase_run_result result = new testcase_run_result();
      receiveBase(result, "testcase_run");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "testcase_run failed: unknown result");
    }

    public int license_register(String license) throws org.apache.thrift.TException
    {
      send_license_register(license);
      return recv_license_register();
    }

    public void send_license_register(String license) throws org.apache.thrift.TException
    {
      license_register_args args = new license_register_args();
      args.setLicense(license);
      sendBase("license_register", args);
    }

    public int recv_license_register() throws org.apache.thrift.TException
    {
      license_register_result result = new license_register_result();
      receiveBase(result, "license_register");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "license_register failed: unknown result");
    }

    public License license_query() throws org.apache.thrift.TException
    {
      send_license_query();
      return recv_license_query();
    }

    public void send_license_query() throws org.apache.thrift.TException
    {
      license_query_args args = new license_query_args();
      sendBase("license_query", args);
    }

    public License recv_license_query() throws org.apache.thrift.TException
    {
      license_query_result result = new license_query_result();
      receiveBase(result, "license_query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "license_query failed: unknown result");
    }

    public java.util.List<Task> task_query(String task_id) throws org.apache.thrift.TException
    {
      send_task_query(task_id);
      return recv_task_query();
    }

    public void send_task_query(String task_id) throws org.apache.thrift.TException
    {
      task_query_args args = new task_query_args();
      args.setTask_id(task_id);
      sendBase("task_query", args);
    }

    public java.util.List<Task> recv_task_query() throws org.apache.thrift.TException
    {
      task_query_result result = new task_query_result();
      receiveBase(result, "task_query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "task_query failed: unknown result");
    }

    public Task task_pause(String task_id) throws org.apache.thrift.TException
    {
      send_task_pause(task_id);
      return recv_task_pause();
    }

    public void send_task_pause(String task_id) throws org.apache.thrift.TException
    {
      task_pause_args args = new task_pause_args();
      args.setTask_id(task_id);
      sendBase("task_pause", args);
    }

    public Task recv_task_pause() throws org.apache.thrift.TException
    {
      task_pause_result result = new task_pause_result();
      receiveBase(result, "task_pause");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "task_pause failed: unknown result");
    }

    public Task task_resume(String task_id) throws org.apache.thrift.TException
    {
      send_task_resume(task_id);
      return recv_task_resume();
    }

    public void send_task_resume(String task_id) throws org.apache.thrift.TException
    {
      task_resume_args args = new task_resume_args();
      args.setTask_id(task_id);
      sendBase("task_resume", args);
    }

    public Task recv_task_resume() throws org.apache.thrift.TException
    {
      task_resume_result result = new task_resume_result();
      receiveBase(result, "task_resume");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "task_resume failed: unknown result");
    }

    public Task task_cancel(String task_id) throws org.apache.thrift.TException
    {
      send_task_cancel(task_id);
      return recv_task_cancel();
    }

    public void send_task_cancel(String task_id) throws org.apache.thrift.TException
    {
      task_cancel_args args = new task_cancel_args();
      args.setTask_id(task_id);
      sendBase("task_cancel", args);
    }

    public Task recv_task_cancel() throws org.apache.thrift.TException
    {
      task_cancel_result result = new task_cancel_result();
      receiveBase(result, "task_cancel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "task_cancel failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void parse(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      parse_call method_call = new parse_call(project_id, version_id, branch_id, tester_id, files, headers, macros, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class parse_call extends org.apache.thrift.async.TAsyncMethodCall<Task> {
      private String project_id;
      private String version_id;
      private String branch_id;
      private String tester_id;
      private java.util.List<String> files;
      private java.util.List<String> headers;
      private java.util.List<Macro> macros;
      public parse_call(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.project_id = project_id;
        this.version_id = version_id;
        this.branch_id = branch_id;
        this.tester_id = tester_id;
        this.files = files;
        this.headers = headers;
        this.macros = macros;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("parse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        parse_args args = new parse_args();
        args.setProject_id(project_id);
        args.setVersion_id(version_id);
        args.setBranch_id(branch_id);
        args.setTester_id(tester_id);
        args.setFiles(files);
        args.setHeaders(headers);
        args.setMacros(macros);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Task getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_parse();
      }
    }

    public void testcase_gen(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      testcase_gen_call method_call = new testcase_gen_call(project_id, version_id, branch_id, tester_id, files, headers, macros, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testcase_gen_call extends org.apache.thrift.async.TAsyncMethodCall<Task> {
      private String project_id;
      private String version_id;
      private String branch_id;
      private String tester_id;
      private java.util.List<String> files;
      private java.util.List<String> headers;
      private java.util.List<Macro> macros;
      public testcase_gen_call(String project_id, String version_id, String branch_id, String tester_id, java.util.List<String> files, java.util.List<String> headers, java.util.List<Macro> macros, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.project_id = project_id;
        this.version_id = version_id;
        this.branch_id = branch_id;
        this.tester_id = tester_id;
        this.files = files;
        this.headers = headers;
        this.macros = macros;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testcase_gen", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testcase_gen_args args = new testcase_gen_args();
        args.setProject_id(project_id);
        args.setVersion_id(version_id);
        args.setBranch_id(branch_id);
        args.setTester_id(tester_id);
        args.setFiles(files);
        args.setHeaders(headers);
        args.setMacros(macros);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Task getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testcase_gen();
      }
    }

    public void testcase_run(String project_id, String version_id, String branch_id, String tester_id, java.util.List<Testcase> testcases, java.util.List<String> headers, java.util.List<Macro> macros, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      testcase_run_call method_call = new testcase_run_call(project_id, version_id, branch_id, tester_id, testcases, headers, macros, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class testcase_run_call extends org.apache.thrift.async.TAsyncMethodCall<Task> {
      private String project_id;
      private String version_id;
      private String branch_id;
      private String tester_id;
      private java.util.List<Testcase> testcases;
      private java.util.List<String> headers;
      private java.util.List<Macro> macros;
      public testcase_run_call(String project_id, String version_id, String branch_id, String tester_id, java.util.List<Testcase> testcases, java.util.List<String> headers, java.util.List<Macro> macros, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.project_id = project_id;
        this.version_id = version_id;
        this.branch_id = branch_id;
        this.tester_id = tester_id;
        this.testcases = testcases;
        this.headers = headers;
        this.macros = macros;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testcase_run", org.apache.thrift.protocol.TMessageType.CALL, 0));
        testcase_run_args args = new testcase_run_args();
        args.setProject_id(project_id);
        args.setVersion_id(version_id);
        args.setBranch_id(branch_id);
        args.setTester_id(tester_id);
        args.setTestcases(testcases);
        args.setHeaders(headers);
        args.setMacros(macros);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Task getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_testcase_run();
      }
    }

    public void license_register(String license, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      license_register_call method_call = new license_register_call(license, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class license_register_call extends org.apache.thrift.async.TAsyncMethodCall<Integer> {
      private String license;
      public license_register_call(String license, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.license = license;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("license_register", org.apache.thrift.protocol.TMessageType.CALL, 0));
        license_register_args args = new license_register_args();
        args.setLicense(license);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_license_register();
      }
    }

    public void license_query(org.apache.thrift.async.AsyncMethodCallback<License> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      license_query_call method_call = new license_query_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class license_query_call extends org.apache.thrift.async.TAsyncMethodCall<License> {
      public license_query_call(org.apache.thrift.async.AsyncMethodCallback<License> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("license_query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        license_query_args args = new license_query_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public License getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_license_query();
      }
    }

    public void task_query(String task_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Task>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      task_query_call method_call = new task_query_call(task_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class task_query_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Task>> {
      private String task_id;
      public task_query_call(String task_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Task>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task_id = task_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("task_query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        task_query_args args = new task_query_args();
        args.setTask_id(task_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Task> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_task_query();
      }
    }

    public void task_pause(String task_id, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      task_pause_call method_call = new task_pause_call(task_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class task_pause_call extends org.apache.thrift.async.TAsyncMethodCall<Task> {
      private String task_id;
      public task_pause_call(String task_id, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task_id = task_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("task_pause", org.apache.thrift.protocol.TMessageType.CALL, 0));
        task_pause_args args = new task_pause_args();
        args.setTask_id(task_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Task getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_task_pause();
      }
    }

    public void task_resume(String task_id, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      task_resume_call method_call = new task_resume_call(task_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class task_resume_call extends org.apache.thrift.async.TAsyncMethodCall<Task> {
      private String task_id;
      public task_resume_call(String task_id, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task_id = task_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("task_resume", org.apache.thrift.protocol.TMessageType.CALL, 0));
        task_resume_args args = new task_resume_args();
        args.setTask_id(task_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Task getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_task_resume();
      }
    }

    public void task_cancel(String task_id, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      task_cancel_call method_call = new task_cancel_call(task_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class task_cancel_call extends org.apache.thrift.async.TAsyncMethodCall<Task> {
      private String task_id;
      public task_cancel_call(String task_id, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.task_id = task_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("task_cancel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        task_cancel_args args = new task_cancel_args();
        args.setTask_id(task_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Task getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_task_cancel();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("parse", new parse());
      processMap.put("testcase_gen", new testcase_gen());
      processMap.put("testcase_run", new testcase_run());
      processMap.put("license_register", new license_register());
      processMap.put("license_query", new license_query());
      processMap.put("task_query", new task_query());
      processMap.put("task_pause", new task_pause());
      processMap.put("task_resume", new task_resume());
      processMap.put("task_cancel", new task_cancel());
      return processMap;
    }

    public static class parse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, parse_args> {
      public parse() {
        super("parse");
      }

      public parse_args getEmptyArgsInstance() {
        return new parse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public parse_result getResult(I iface, parse_args args) throws org.apache.thrift.TException {
        parse_result result = new parse_result();
        result.success = iface.parse(args.project_id, args.version_id, args.branch_id, args.tester_id, args.files, args.headers, args.macros);
        return result;
      }
    }

    public static class testcase_gen<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testcase_gen_args> {
      public testcase_gen() {
        super("testcase_gen");
      }

      public testcase_gen_args getEmptyArgsInstance() {
        return new testcase_gen_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public testcase_gen_result getResult(I iface, testcase_gen_args args) throws org.apache.thrift.TException {
        testcase_gen_result result = new testcase_gen_result();
        result.success = iface.testcase_gen(args.project_id, args.version_id, args.branch_id, args.tester_id, args.files, args.headers, args.macros);
        return result;
      }
    }

    public static class testcase_run<I extends Iface> extends org.apache.thrift.ProcessFunction<I, testcase_run_args> {
      public testcase_run() {
        super("testcase_run");
      }

      public testcase_run_args getEmptyArgsInstance() {
        return new testcase_run_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public testcase_run_result getResult(I iface, testcase_run_args args) throws org.apache.thrift.TException {
        testcase_run_result result = new testcase_run_result();
        result.success = iface.testcase_run(args.project_id, args.version_id, args.branch_id, args.tester_id, args.testcases, args.headers, args.macros);
        return result;
      }
    }

    public static class license_register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, license_register_args> {
      public license_register() {
        super("license_register");
      }

      public license_register_args getEmptyArgsInstance() {
        return new license_register_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public license_register_result getResult(I iface, license_register_args args) throws org.apache.thrift.TException {
        license_register_result result = new license_register_result();
        result.success = iface.license_register(args.license);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class license_query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, license_query_args> {
      public license_query() {
        super("license_query");
      }

      public license_query_args getEmptyArgsInstance() {
        return new license_query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public license_query_result getResult(I iface, license_query_args args) throws org.apache.thrift.TException {
        license_query_result result = new license_query_result();
        result.success = iface.license_query();
        return result;
      }
    }

    public static class task_query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, task_query_args> {
      public task_query() {
        super("task_query");
      }

      public task_query_args getEmptyArgsInstance() {
        return new task_query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public task_query_result getResult(I iface, task_query_args args) throws org.apache.thrift.TException {
        task_query_result result = new task_query_result();
        result.success = iface.task_query(args.task_id);
        return result;
      }
    }

    public static class task_pause<I extends Iface> extends org.apache.thrift.ProcessFunction<I, task_pause_args> {
      public task_pause() {
        super("task_pause");
      }

      public task_pause_args getEmptyArgsInstance() {
        return new task_pause_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public task_pause_result getResult(I iface, task_pause_args args) throws org.apache.thrift.TException {
        task_pause_result result = new task_pause_result();
        result.success = iface.task_pause(args.task_id);
        return result;
      }
    }

    public static class task_resume<I extends Iface> extends org.apache.thrift.ProcessFunction<I, task_resume_args> {
      public task_resume() {
        super("task_resume");
      }

      public task_resume_args getEmptyArgsInstance() {
        return new task_resume_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public task_resume_result getResult(I iface, task_resume_args args) throws org.apache.thrift.TException {
        task_resume_result result = new task_resume_result();
        result.success = iface.task_resume(args.task_id);
        return result;
      }
    }

    public static class task_cancel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, task_cancel_args> {
      public task_cancel() {
        super("task_cancel");
      }

      public task_cancel_args getEmptyArgsInstance() {
        return new task_cancel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public task_cancel_result getResult(I iface, task_cancel_args args) throws org.apache.thrift.TException {
        task_cancel_result result = new task_cancel_result();
        result.success = iface.task_cancel(args.task_id);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("parse", new parse());
      processMap.put("testcase_gen", new testcase_gen());
      processMap.put("testcase_run", new testcase_run());
      processMap.put("license_register", new license_register());
      processMap.put("license_query", new license_query());
      processMap.put("task_query", new task_query());
      processMap.put("task_pause", new task_pause());
      processMap.put("task_resume", new task_resume());
      processMap.put("task_cancel", new task_cancel());
      return processMap;
    }

    public static class parse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, parse_args, Task> {
      public parse() {
        super("parse");
      }

      public parse_args getEmptyArgsInstance() {
        return new parse_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Task> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Task>() { 
          public void onComplete(Task o) {
            parse_result result = new parse_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            parse_result result = new parse_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, parse_args args, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
        iface.parse(args.project_id, args.version_id, args.branch_id, args.tester_id, args.files, args.headers, args.macros,resultHandler);
      }
    }

    public static class testcase_gen<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, testcase_gen_args, Task> {
      public testcase_gen() {
        super("testcase_gen");
      }

      public testcase_gen_args getEmptyArgsInstance() {
        return new testcase_gen_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Task> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Task>() { 
          public void onComplete(Task o) {
            testcase_gen_result result = new testcase_gen_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            testcase_gen_result result = new testcase_gen_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, testcase_gen_args args, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
        iface.testcase_gen(args.project_id, args.version_id, args.branch_id, args.tester_id, args.files, args.headers, args.macros,resultHandler);
      }
    }

    public static class testcase_run<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, testcase_run_args, Task> {
      public testcase_run() {
        super("testcase_run");
      }

      public testcase_run_args getEmptyArgsInstance() {
        return new testcase_run_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Task> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Task>() { 
          public void onComplete(Task o) {
            testcase_run_result result = new testcase_run_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            testcase_run_result result = new testcase_run_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, testcase_run_args args, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
        iface.testcase_run(args.project_id, args.version_id, args.branch_id, args.tester_id, args.testcases, args.headers, args.macros,resultHandler);
      }
    }

    public static class license_register<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, license_register_args, Integer> {
      public license_register() {
        super("license_register");
      }

      public license_register_args getEmptyArgsInstance() {
        return new license_register_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Integer>() {
          public void onComplete(Integer o) {
            license_register_result result = new license_register_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            license_register_result result = new license_register_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, license_register_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws org.apache.thrift.TException {
        iface.license_register(args.license,resultHandler);
      }
    }

    public static class license_query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, license_query_args, License> {
      public license_query() {
        super("license_query");
      }

      public license_query_args getEmptyArgsInstance() {
        return new license_query_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<License> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<License>() { 
          public void onComplete(License o) {
            license_query_result result = new license_query_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            license_query_result result = new license_query_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, license_query_args args, org.apache.thrift.async.AsyncMethodCallback<License> resultHandler) throws org.apache.thrift.TException {
        iface.license_query(resultHandler);
      }
    }

    public static class task_query<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, task_query_args, java.util.List<Task>> {
      public task_query() {
        super("task_query");
      }

      public task_query_args getEmptyArgsInstance() {
        return new task_query_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Task>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Task>>() { 
          public void onComplete(java.util.List<Task> o) {
            task_query_result result = new task_query_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            task_query_result result = new task_query_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, task_query_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Task>> resultHandler) throws org.apache.thrift.TException {
        iface.task_query(args.task_id,resultHandler);
      }
    }

    public static class task_pause<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, task_pause_args, Task> {
      public task_pause() {
        super("task_pause");
      }

      public task_pause_args getEmptyArgsInstance() {
        return new task_pause_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Task> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Task>() { 
          public void onComplete(Task o) {
            task_pause_result result = new task_pause_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            task_pause_result result = new task_pause_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, task_pause_args args, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
        iface.task_pause(args.task_id,resultHandler);
      }
    }

    public static class task_resume<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, task_resume_args, Task> {
      public task_resume() {
        super("task_resume");
      }

      public task_resume_args getEmptyArgsInstance() {
        return new task_resume_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Task> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Task>() { 
          public void onComplete(Task o) {
            task_resume_result result = new task_resume_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            task_resume_result result = new task_resume_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, task_resume_args args, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
        iface.task_resume(args.task_id,resultHandler);
      }
    }

    public static class task_cancel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, task_cancel_args, Task> {
      public task_cancel() {
        super("task_cancel");
      }

      public task_cancel_args getEmptyArgsInstance() {
        return new task_cancel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Task> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Task>() { 
          public void onComplete(Task o) {
            task_cancel_result result = new task_cancel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            task_cancel_result result = new task_cancel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, task_cancel_args args, org.apache.thrift.async.AsyncMethodCallback<Task> resultHandler) throws org.apache.thrift.TException {
        iface.task_cancel(args.task_id,resultHandler);
      }
    }

  }

  public static class parse_args implements org.apache.thrift.TBase<parse_args, parse_args._Fields>, java.io.Serializable, Cloneable, Comparable<parse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parse_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("project_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("version_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("branch_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TESTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tester_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("files", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField MACROS_FIELD_DESC = new org.apache.thrift.protocol.TField("macros", org.apache.thrift.protocol.TType.LIST, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parse_argsTupleSchemeFactory();

    public String project_id; // required
    public String version_id; // required
    public String branch_id; // required
    public String tester_id; // required
    public java.util.List<String> files; // required
    public java.util.List<String> headers; // required
    public java.util.List<Macro> macros; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "project_id"),
      VERSION_ID((short)2, "version_id"),
      BRANCH_ID((short)3, "branch_id"),
      TESTER_ID((short)4, "tester_id"),
      FILES((short)5, "files"),
      HEADERS((short)6, "headers"),
      MACROS((short)7, "macros");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // VERSION_ID
            return VERSION_ID;
          case 3: // BRANCH_ID
            return BRANCH_ID;
          case 4: // TESTER_ID
            return TESTER_ID;
          case 5: // FILES
            return FILES;
          case 6: // HEADERS
            return HEADERS;
          case 7: // MACROS
            return MACROS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("project_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("version_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("branch_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TESTER_ID, new org.apache.thrift.meta_data.FieldMetaData("tester_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILES, new org.apache.thrift.meta_data.FieldMetaData("files", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MACROS, new org.apache.thrift.meta_data.FieldMetaData("macros", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Macro.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parse_args.class, metaDataMap);
    }

    public parse_args() {
    }

    public parse_args(
      String project_id,
      String version_id,
      String branch_id,
      String tester_id,
      java.util.List<String> files,
      java.util.List<String> headers,
      java.util.List<Macro> macros)
    {
      this();
      this.project_id = project_id;
      this.version_id = version_id;
      this.branch_id = branch_id;
      this.tester_id = tester_id;
      this.files = files;
      this.headers = headers;
      this.macros = macros;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parse_args(parse_args other) {
      if (other.isSetProject_id()) {
        this.project_id = other.project_id;
      }
      if (other.isSetVersion_id()) {
        this.version_id = other.version_id;
      }
      if (other.isSetBranch_id()) {
        this.branch_id = other.branch_id;
      }
      if (other.isSetTester_id()) {
        this.tester_id = other.tester_id;
      }
      if (other.isSetFiles()) {
        java.util.List<String> __this__files = new java.util.ArrayList<String>(other.files);
        this.files = __this__files;
      }
      if (other.isSetHeaders()) {
        java.util.List<String> __this__headers = new java.util.ArrayList<String>(other.headers);
        this.headers = __this__headers;
      }
      if (other.isSetMacros()) {
        java.util.List<Macro> __this__macros = new java.util.ArrayList<Macro>(other.macros.size());
        for (Macro other_element : other.macros) {
          __this__macros.add(new Macro(other_element));
        }
        this.macros = __this__macros;
      }
    }

    public parse_args deepCopy() {
      return new parse_args(this);
    }

    @Override
    public void clear() {
      this.project_id = null;
      this.version_id = null;
      this.branch_id = null;
      this.tester_id = null;
      this.files = null;
      this.headers = null;
      this.macros = null;
    }

    public String getProject_id() {
      return this.project_id;
    }

    public parse_args setProject_id(String project_id) {
      this.project_id = project_id;
      return this;
    }

    public void unsetProject_id() {
      this.project_id = null;
    }

    /** Returns true if field project_id is set (has been assigned a value) and false otherwise */
    public boolean isSetProject_id() {
      return this.project_id != null;
    }

    public void setProject_idIsSet(boolean value) {
      if (!value) {
        this.project_id = null;
      }
    }

    public String getVersion_id() {
      return this.version_id;
    }

    public parse_args setVersion_id(String version_id) {
      this.version_id = version_id;
      return this;
    }

    public void unsetVersion_id() {
      this.version_id = null;
    }

    /** Returns true if field version_id is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion_id() {
      return this.version_id != null;
    }

    public void setVersion_idIsSet(boolean value) {
      if (!value) {
        this.version_id = null;
      }
    }

    public String getBranch_id() {
      return this.branch_id;
    }

    public parse_args setBranch_id(String branch_id) {
      this.branch_id = branch_id;
      return this;
    }

    public void unsetBranch_id() {
      this.branch_id = null;
    }

    /** Returns true if field branch_id is set (has been assigned a value) and false otherwise */
    public boolean isSetBranch_id() {
      return this.branch_id != null;
    }

    public void setBranch_idIsSet(boolean value) {
      if (!value) {
        this.branch_id = null;
      }
    }

    public String getTester_id() {
      return this.tester_id;
    }

    public parse_args setTester_id(String tester_id) {
      this.tester_id = tester_id;
      return this;
    }

    public void unsetTester_id() {
      this.tester_id = null;
    }

    /** Returns true if field tester_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTester_id() {
      return this.tester_id != null;
    }

    public void setTester_idIsSet(boolean value) {
      if (!value) {
        this.tester_id = null;
      }
    }

    public int getFilesSize() {
      return (this.files == null) ? 0 : this.files.size();
    }

    public java.util.Iterator<String> getFilesIterator() {
      return (this.files == null) ? null : this.files.iterator();
    }

    public void addToFiles(String elem) {
      if (this.files == null) {
        this.files = new java.util.ArrayList<String>();
      }
      this.files.add(elem);
    }

    public java.util.List<String> getFiles() {
      return this.files;
    }

    public parse_args setFiles(java.util.List<String> files) {
      this.files = files;
      return this;
    }

    public void unsetFiles() {
      this.files = null;
    }

    /** Returns true if field files is set (has been assigned a value) and false otherwise */
    public boolean isSetFiles() {
      return this.files != null;
    }

    public void setFilesIsSet(boolean value) {
      if (!value) {
        this.files = null;
      }
    }

    public int getHeadersSize() {
      return (this.headers == null) ? 0 : this.headers.size();
    }

    public java.util.Iterator<String> getHeadersIterator() {
      return (this.headers == null) ? null : this.headers.iterator();
    }

    public void addToHeaders(String elem) {
      if (this.headers == null) {
        this.headers = new java.util.ArrayList<String>();
      }
      this.headers.add(elem);
    }

    public java.util.List<String> getHeaders() {
      return this.headers;
    }

    public parse_args setHeaders(java.util.List<String> headers) {
      this.headers = headers;
      return this;
    }

    public void unsetHeaders() {
      this.headers = null;
    }

    /** Returns true if field headers is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaders() {
      return this.headers != null;
    }

    public void setHeadersIsSet(boolean value) {
      if (!value) {
        this.headers = null;
      }
    }

    public int getMacrosSize() {
      return (this.macros == null) ? 0 : this.macros.size();
    }

    public java.util.Iterator<Macro> getMacrosIterator() {
      return (this.macros == null) ? null : this.macros.iterator();
    }

    public void addToMacros(Macro elem) {
      if (this.macros == null) {
        this.macros = new java.util.ArrayList<Macro>();
      }
      this.macros.add(elem);
    }

    public java.util.List<Macro> getMacros() {
      return this.macros;
    }

    public parse_args setMacros(java.util.List<Macro> macros) {
      this.macros = macros;
      return this;
    }

    public void unsetMacros() {
      this.macros = null;
    }

    /** Returns true if field macros is set (has been assigned a value) and false otherwise */
    public boolean isSetMacros() {
      return this.macros != null;
    }

    public void setMacrosIsSet(boolean value) {
      if (!value) {
        this.macros = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProject_id();
        } else {
          setProject_id((String)value);
        }
        break;

      case VERSION_ID:
        if (value == null) {
          unsetVersion_id();
        } else {
          setVersion_id((String)value);
        }
        break;

      case BRANCH_ID:
        if (value == null) {
          unsetBranch_id();
        } else {
          setBranch_id((String)value);
        }
        break;

      case TESTER_ID:
        if (value == null) {
          unsetTester_id();
        } else {
          setTester_id((String)value);
        }
        break;

      case FILES:
        if (value == null) {
          unsetFiles();
        } else {
          setFiles((java.util.List<String>)value);
        }
        break;

      case HEADERS:
        if (value == null) {
          unsetHeaders();
        } else {
          setHeaders((java.util.List<String>)value);
        }
        break;

      case MACROS:
        if (value == null) {
          unsetMacros();
        } else {
          setMacros((java.util.List<Macro>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProject_id();

      case VERSION_ID:
        return getVersion_id();

      case BRANCH_ID:
        return getBranch_id();

      case TESTER_ID:
        return getTester_id();

      case FILES:
        return getFiles();

      case HEADERS:
        return getHeaders();

      case MACROS:
        return getMacros();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProject_id();
      case VERSION_ID:
        return isSetVersion_id();
      case BRANCH_ID:
        return isSetBranch_id();
      case TESTER_ID:
        return isSetTester_id();
      case FILES:
        return isSetFiles();
      case HEADERS:
        return isSetHeaders();
      case MACROS:
        return isSetMacros();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parse_args)
        return this.equals((parse_args)that);
      return false;
    }

    public boolean equals(parse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_project_id = true && this.isSetProject_id();
      boolean that_present_project_id = true && that.isSetProject_id();
      if (this_present_project_id || that_present_project_id) {
        if (!(this_present_project_id && that_present_project_id))
          return false;
        if (!this.project_id.equals(that.project_id))
          return false;
      }

      boolean this_present_version_id = true && this.isSetVersion_id();
      boolean that_present_version_id = true && that.isSetVersion_id();
      if (this_present_version_id || that_present_version_id) {
        if (!(this_present_version_id && that_present_version_id))
          return false;
        if (!this.version_id.equals(that.version_id))
          return false;
      }

      boolean this_present_branch_id = true && this.isSetBranch_id();
      boolean that_present_branch_id = true && that.isSetBranch_id();
      if (this_present_branch_id || that_present_branch_id) {
        if (!(this_present_branch_id && that_present_branch_id))
          return false;
        if (!this.branch_id.equals(that.branch_id))
          return false;
      }

      boolean this_present_tester_id = true && this.isSetTester_id();
      boolean that_present_tester_id = true && that.isSetTester_id();
      if (this_present_tester_id || that_present_tester_id) {
        if (!(this_present_tester_id && that_present_tester_id))
          return false;
        if (!this.tester_id.equals(that.tester_id))
          return false;
      }

      boolean this_present_files = true && this.isSetFiles();
      boolean that_present_files = true && that.isSetFiles();
      if (this_present_files || that_present_files) {
        if (!(this_present_files && that_present_files))
          return false;
        if (!this.files.equals(that.files))
          return false;
      }

      boolean this_present_headers = true && this.isSetHeaders();
      boolean that_present_headers = true && that.isSetHeaders();
      if (this_present_headers || that_present_headers) {
        if (!(this_present_headers && that_present_headers))
          return false;
        if (!this.headers.equals(that.headers))
          return false;
      }

      boolean this_present_macros = true && this.isSetMacros();
      boolean that_present_macros = true && that.isSetMacros();
      if (this_present_macros || that_present_macros) {
        if (!(this_present_macros && that_present_macros))
          return false;
        if (!this.macros.equals(that.macros))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProject_id()) ? 131071 : 524287);
      if (isSetProject_id())
        hashCode = hashCode * 8191 + project_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetVersion_id()) ? 131071 : 524287);
      if (isSetVersion_id())
        hashCode = hashCode * 8191 + version_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetBranch_id()) ? 131071 : 524287);
      if (isSetBranch_id())
        hashCode = hashCode * 8191 + branch_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetTester_id()) ? 131071 : 524287);
      if (isSetTester_id())
        hashCode = hashCode * 8191 + tester_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetFiles()) ? 131071 : 524287);
      if (isSetFiles())
        hashCode = hashCode * 8191 + files.hashCode();

      hashCode = hashCode * 8191 + ((isSetHeaders()) ? 131071 : 524287);
      if (isSetHeaders())
        hashCode = hashCode * 8191 + headers.hashCode();

      hashCode = hashCode * 8191 + ((isSetMacros()) ? 131071 : 524287);
      if (isSetMacros())
        hashCode = hashCode * 8191 + macros.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(parse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProject_id()).compareTo(other.isSetProject_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProject_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project_id, other.project_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion_id()).compareTo(other.isSetVersion_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_id, other.version_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBranch_id()).compareTo(other.isSetBranch_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBranch_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branch_id, other.branch_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTester_id()).compareTo(other.isSetTester_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTester_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tester_id, other.tester_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFiles()).compareTo(other.isSetFiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.files, other.files);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(other.isSetHeaders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, other.headers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMacros()).compareTo(other.isSetMacros());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMacros()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macros, other.macros);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parse_args(");
      boolean first = true;

      sb.append("project_id:");
      if (this.project_id == null) {
        sb.append("null");
      } else {
        sb.append(this.project_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version_id:");
      if (this.version_id == null) {
        sb.append("null");
      } else {
        sb.append(this.version_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("branch_id:");
      if (this.branch_id == null) {
        sb.append("null");
      } else {
        sb.append(this.branch_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tester_id:");
      if (this.tester_id == null) {
        sb.append("null");
      } else {
        sb.append(this.tester_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("files:");
      if (this.files == null) {
        sb.append("null");
      } else {
        sb.append(this.files);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("headers:");
      if (this.headers == null) {
        sb.append("null");
      } else {
        sb.append(this.headers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("macros:");
      if (this.macros == null) {
        sb.append("null");
      } else {
        sb.append(this.macros);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parse_argsStandardScheme getScheme() {
        return new parse_argsStandardScheme();
      }
    }

    private static class parse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<parse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.project_id = iprot.readString();
                struct.setProject_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.version_id = iprot.readString();
                struct.setVersion_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BRANCH_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.branch_id = iprot.readString();
                struct.setBranch_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TESTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tester_id = iprot.readString();
                struct.setTester_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FILES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.files = new java.util.ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.files.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setFilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // HEADERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.headers = new java.util.ArrayList<String>(_list3.size);
                  String _elem4;
                  for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                  {
                    _elem4 = iprot.readString();
                    struct.headers.add(_elem4);
                  }
                  iprot.readListEnd();
                }
                struct.setHeadersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // MACROS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                  struct.macros = new java.util.ArrayList<Macro>(_list6.size);
                  Macro _elem7;
                  for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                  {
                    _elem7 = new Macro();
                    _elem7.read(iprot);
                    struct.macros.add(_elem7);
                  }
                  iprot.readListEnd();
                }
                struct.setMacrosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.project_id != null) {
          oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
          oprot.writeString(struct.project_id);
          oprot.writeFieldEnd();
        }
        if (struct.version_id != null) {
          oprot.writeFieldBegin(VERSION_ID_FIELD_DESC);
          oprot.writeString(struct.version_id);
          oprot.writeFieldEnd();
        }
        if (struct.branch_id != null) {
          oprot.writeFieldBegin(BRANCH_ID_FIELD_DESC);
          oprot.writeString(struct.branch_id);
          oprot.writeFieldEnd();
        }
        if (struct.tester_id != null) {
          oprot.writeFieldBegin(TESTER_ID_FIELD_DESC);
          oprot.writeString(struct.tester_id);
          oprot.writeFieldEnd();
        }
        if (struct.files != null) {
          oprot.writeFieldBegin(FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.files.size()));
            for (String _iter9 : struct.files)
            {
              oprot.writeString(_iter9);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.headers != null) {
          oprot.writeFieldBegin(HEADERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.headers.size()));
            for (String _iter10 : struct.headers)
            {
              oprot.writeString(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.macros != null) {
          oprot.writeFieldBegin(MACROS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.macros.size()));
            for (Macro _iter11 : struct.macros)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parse_argsTupleScheme getScheme() {
        return new parse_argsTupleScheme();
      }
    }

    private static class parse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<parse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProject_id()) {
          optionals.set(0);
        }
        if (struct.isSetVersion_id()) {
          optionals.set(1);
        }
        if (struct.isSetBranch_id()) {
          optionals.set(2);
        }
        if (struct.isSetTester_id()) {
          optionals.set(3);
        }
        if (struct.isSetFiles()) {
          optionals.set(4);
        }
        if (struct.isSetHeaders()) {
          optionals.set(5);
        }
        if (struct.isSetMacros()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProject_id()) {
          oprot.writeString(struct.project_id);
        }
        if (struct.isSetVersion_id()) {
          oprot.writeString(struct.version_id);
        }
        if (struct.isSetBranch_id()) {
          oprot.writeString(struct.branch_id);
        }
        if (struct.isSetTester_id()) {
          oprot.writeString(struct.tester_id);
        }
        if (struct.isSetFiles()) {
          {
            oprot.writeI32(struct.files.size());
            for (String _iter12 : struct.files)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetHeaders()) {
          {
            oprot.writeI32(struct.headers.size());
            for (String _iter13 : struct.headers)
            {
              oprot.writeString(_iter13);
            }
          }
        }
        if (struct.isSetMacros()) {
          {
            oprot.writeI32(struct.macros.size());
            for (Macro _iter14 : struct.macros)
            {
              _iter14.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.project_id = iprot.readString();
          struct.setProject_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version_id = iprot.readString();
          struct.setVersion_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.branch_id = iprot.readString();
          struct.setBranch_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tester_id = iprot.readString();
          struct.setTester_idIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.files = new java.util.ArrayList<String>(_list15.size);
            String _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = iprot.readString();
              struct.files.add(_elem16);
            }
          }
          struct.setFilesIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.headers = new java.util.ArrayList<String>(_list18.size);
            String _elem19;
            for (int _i20 = 0; _i20 < _list18.size; ++_i20)
            {
              _elem19 = iprot.readString();
              struct.headers.add(_elem19);
            }
          }
          struct.setHeadersIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.macros = new java.util.ArrayList<Macro>(_list21.size);
            Macro _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Macro();
              _elem22.read(iprot);
              struct.macros.add(_elem22);
            }
          }
          struct.setMacrosIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class parse_result implements org.apache.thrift.TBase<parse_result, parse_result._Fields>, java.io.Serializable, Cloneable, Comparable<parse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("parse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new parse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new parse_resultTupleSchemeFactory();

    public Task success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Task.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(parse_result.class, metaDataMap);
    }

    public parse_result() {
    }

    public parse_result(
      Task success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public parse_result(parse_result other) {
      if (other.isSetSuccess()) {
        this.success = new Task(other.success);
      }
    }

    public parse_result deepCopy() {
      return new parse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Task getSuccess() {
      return this.success;
    }

    public parse_result setSuccess(Task success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Task)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof parse_result)
        return this.equals((parse_result)that);
      return false;
    }

    public boolean equals(parse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(parse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("parse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class parse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parse_resultStandardScheme getScheme() {
        return new parse_resultStandardScheme();
      }
    }

    private static class parse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<parse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, parse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Task();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, parse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class parse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public parse_resultTupleScheme getScheme() {
        return new parse_resultTupleScheme();
      }
    }

    private static class parse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<parse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, parse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, parse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Task();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class testcase_gen_args implements org.apache.thrift.TBase<testcase_gen_args, testcase_gen_args._Fields>, java.io.Serializable, Cloneable, Comparable<testcase_gen_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testcase_gen_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("project_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("version_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("branch_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TESTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tester_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("files", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField MACROS_FIELD_DESC = new org.apache.thrift.protocol.TField("macros", org.apache.thrift.protocol.TType.LIST, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new testcase_gen_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new testcase_gen_argsTupleSchemeFactory();

    public String project_id; // required
    public String version_id; // required
    public String branch_id; // required
    public String tester_id; // required
    public java.util.List<String> files; // required
    public java.util.List<String> headers; // required
    public java.util.List<Macro> macros; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "project_id"),
      VERSION_ID((short)2, "version_id"),
      BRANCH_ID((short)3, "branch_id"),
      TESTER_ID((short)4, "tester_id"),
      FILES((short)5, "files"),
      HEADERS((short)6, "headers"),
      MACROS((short)7, "macros");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // VERSION_ID
            return VERSION_ID;
          case 3: // BRANCH_ID
            return BRANCH_ID;
          case 4: // TESTER_ID
            return TESTER_ID;
          case 5: // FILES
            return FILES;
          case 6: // HEADERS
            return HEADERS;
          case 7: // MACROS
            return MACROS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("project_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("version_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("branch_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TESTER_ID, new org.apache.thrift.meta_data.FieldMetaData("tester_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILES, new org.apache.thrift.meta_data.FieldMetaData("files", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MACROS, new org.apache.thrift.meta_data.FieldMetaData("macros", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Macro.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testcase_gen_args.class, metaDataMap);
    }

    public testcase_gen_args() {
    }

    public testcase_gen_args(
      String project_id,
      String version_id,
      String branch_id,
      String tester_id,
      java.util.List<String> files,
      java.util.List<String> headers,
      java.util.List<Macro> macros)
    {
      this();
      this.project_id = project_id;
      this.version_id = version_id;
      this.branch_id = branch_id;
      this.tester_id = tester_id;
      this.files = files;
      this.headers = headers;
      this.macros = macros;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testcase_gen_args(testcase_gen_args other) {
      if (other.isSetProject_id()) {
        this.project_id = other.project_id;
      }
      if (other.isSetVersion_id()) {
        this.version_id = other.version_id;
      }
      if (other.isSetBranch_id()) {
        this.branch_id = other.branch_id;
      }
      if (other.isSetTester_id()) {
        this.tester_id = other.tester_id;
      }
      if (other.isSetFiles()) {
        java.util.List<String> __this__files = new java.util.ArrayList<String>(other.files);
        this.files = __this__files;
      }
      if (other.isSetHeaders()) {
        java.util.List<String> __this__headers = new java.util.ArrayList<String>(other.headers);
        this.headers = __this__headers;
      }
      if (other.isSetMacros()) {
        java.util.List<Macro> __this__macros = new java.util.ArrayList<Macro>(other.macros.size());
        for (Macro other_element : other.macros) {
          __this__macros.add(new Macro(other_element));
        }
        this.macros = __this__macros;
      }
    }

    public testcase_gen_args deepCopy() {
      return new testcase_gen_args(this);
    }

    @Override
    public void clear() {
      this.project_id = null;
      this.version_id = null;
      this.branch_id = null;
      this.tester_id = null;
      this.files = null;
      this.headers = null;
      this.macros = null;
    }

    public String getProject_id() {
      return this.project_id;
    }

    public testcase_gen_args setProject_id(String project_id) {
      this.project_id = project_id;
      return this;
    }

    public void unsetProject_id() {
      this.project_id = null;
    }

    /** Returns true if field project_id is set (has been assigned a value) and false otherwise */
    public boolean isSetProject_id() {
      return this.project_id != null;
    }

    public void setProject_idIsSet(boolean value) {
      if (!value) {
        this.project_id = null;
      }
    }

    public String getVersion_id() {
      return this.version_id;
    }

    public testcase_gen_args setVersion_id(String version_id) {
      this.version_id = version_id;
      return this;
    }

    public void unsetVersion_id() {
      this.version_id = null;
    }

    /** Returns true if field version_id is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion_id() {
      return this.version_id != null;
    }

    public void setVersion_idIsSet(boolean value) {
      if (!value) {
        this.version_id = null;
      }
    }

    public String getBranch_id() {
      return this.branch_id;
    }

    public testcase_gen_args setBranch_id(String branch_id) {
      this.branch_id = branch_id;
      return this;
    }

    public void unsetBranch_id() {
      this.branch_id = null;
    }

    /** Returns true if field branch_id is set (has been assigned a value) and false otherwise */
    public boolean isSetBranch_id() {
      return this.branch_id != null;
    }

    public void setBranch_idIsSet(boolean value) {
      if (!value) {
        this.branch_id = null;
      }
    }

    public String getTester_id() {
      return this.tester_id;
    }

    public testcase_gen_args setTester_id(String tester_id) {
      this.tester_id = tester_id;
      return this;
    }

    public void unsetTester_id() {
      this.tester_id = null;
    }

    /** Returns true if field tester_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTester_id() {
      return this.tester_id != null;
    }

    public void setTester_idIsSet(boolean value) {
      if (!value) {
        this.tester_id = null;
      }
    }

    public int getFilesSize() {
      return (this.files == null) ? 0 : this.files.size();
    }

    public java.util.Iterator<String> getFilesIterator() {
      return (this.files == null) ? null : this.files.iterator();
    }

    public void addToFiles(String elem) {
      if (this.files == null) {
        this.files = new java.util.ArrayList<String>();
      }
      this.files.add(elem);
    }

    public java.util.List<String> getFiles() {
      return this.files;
    }

    public testcase_gen_args setFiles(java.util.List<String> files) {
      this.files = files;
      return this;
    }

    public void unsetFiles() {
      this.files = null;
    }

    /** Returns true if field files is set (has been assigned a value) and false otherwise */
    public boolean isSetFiles() {
      return this.files != null;
    }

    public void setFilesIsSet(boolean value) {
      if (!value) {
        this.files = null;
      }
    }

    public int getHeadersSize() {
      return (this.headers == null) ? 0 : this.headers.size();
    }

    public java.util.Iterator<String> getHeadersIterator() {
      return (this.headers == null) ? null : this.headers.iterator();
    }

    public void addToHeaders(String elem) {
      if (this.headers == null) {
        this.headers = new java.util.ArrayList<String>();
      }
      this.headers.add(elem);
    }

    public java.util.List<String> getHeaders() {
      return this.headers;
    }

    public testcase_gen_args setHeaders(java.util.List<String> headers) {
      this.headers = headers;
      return this;
    }

    public void unsetHeaders() {
      this.headers = null;
    }

    /** Returns true if field headers is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaders() {
      return this.headers != null;
    }

    public void setHeadersIsSet(boolean value) {
      if (!value) {
        this.headers = null;
      }
    }

    public int getMacrosSize() {
      return (this.macros == null) ? 0 : this.macros.size();
    }

    public java.util.Iterator<Macro> getMacrosIterator() {
      return (this.macros == null) ? null : this.macros.iterator();
    }

    public void addToMacros(Macro elem) {
      if (this.macros == null) {
        this.macros = new java.util.ArrayList<Macro>();
      }
      this.macros.add(elem);
    }

    public java.util.List<Macro> getMacros() {
      return this.macros;
    }

    public testcase_gen_args setMacros(java.util.List<Macro> macros) {
      this.macros = macros;
      return this;
    }

    public void unsetMacros() {
      this.macros = null;
    }

    /** Returns true if field macros is set (has been assigned a value) and false otherwise */
    public boolean isSetMacros() {
      return this.macros != null;
    }

    public void setMacrosIsSet(boolean value) {
      if (!value) {
        this.macros = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProject_id();
        } else {
          setProject_id((String)value);
        }
        break;

      case VERSION_ID:
        if (value == null) {
          unsetVersion_id();
        } else {
          setVersion_id((String)value);
        }
        break;

      case BRANCH_ID:
        if (value == null) {
          unsetBranch_id();
        } else {
          setBranch_id((String)value);
        }
        break;

      case TESTER_ID:
        if (value == null) {
          unsetTester_id();
        } else {
          setTester_id((String)value);
        }
        break;

      case FILES:
        if (value == null) {
          unsetFiles();
        } else {
          setFiles((java.util.List<String>)value);
        }
        break;

      case HEADERS:
        if (value == null) {
          unsetHeaders();
        } else {
          setHeaders((java.util.List<String>)value);
        }
        break;

      case MACROS:
        if (value == null) {
          unsetMacros();
        } else {
          setMacros((java.util.List<Macro>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProject_id();

      case VERSION_ID:
        return getVersion_id();

      case BRANCH_ID:
        return getBranch_id();

      case TESTER_ID:
        return getTester_id();

      case FILES:
        return getFiles();

      case HEADERS:
        return getHeaders();

      case MACROS:
        return getMacros();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProject_id();
      case VERSION_ID:
        return isSetVersion_id();
      case BRANCH_ID:
        return isSetBranch_id();
      case TESTER_ID:
        return isSetTester_id();
      case FILES:
        return isSetFiles();
      case HEADERS:
        return isSetHeaders();
      case MACROS:
        return isSetMacros();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testcase_gen_args)
        return this.equals((testcase_gen_args)that);
      return false;
    }

    public boolean equals(testcase_gen_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_project_id = true && this.isSetProject_id();
      boolean that_present_project_id = true && that.isSetProject_id();
      if (this_present_project_id || that_present_project_id) {
        if (!(this_present_project_id && that_present_project_id))
          return false;
        if (!this.project_id.equals(that.project_id))
          return false;
      }

      boolean this_present_version_id = true && this.isSetVersion_id();
      boolean that_present_version_id = true && that.isSetVersion_id();
      if (this_present_version_id || that_present_version_id) {
        if (!(this_present_version_id && that_present_version_id))
          return false;
        if (!this.version_id.equals(that.version_id))
          return false;
      }

      boolean this_present_branch_id = true && this.isSetBranch_id();
      boolean that_present_branch_id = true && that.isSetBranch_id();
      if (this_present_branch_id || that_present_branch_id) {
        if (!(this_present_branch_id && that_present_branch_id))
          return false;
        if (!this.branch_id.equals(that.branch_id))
          return false;
      }

      boolean this_present_tester_id = true && this.isSetTester_id();
      boolean that_present_tester_id = true && that.isSetTester_id();
      if (this_present_tester_id || that_present_tester_id) {
        if (!(this_present_tester_id && that_present_tester_id))
          return false;
        if (!this.tester_id.equals(that.tester_id))
          return false;
      }

      boolean this_present_files = true && this.isSetFiles();
      boolean that_present_files = true && that.isSetFiles();
      if (this_present_files || that_present_files) {
        if (!(this_present_files && that_present_files))
          return false;
        if (!this.files.equals(that.files))
          return false;
      }

      boolean this_present_headers = true && this.isSetHeaders();
      boolean that_present_headers = true && that.isSetHeaders();
      if (this_present_headers || that_present_headers) {
        if (!(this_present_headers && that_present_headers))
          return false;
        if (!this.headers.equals(that.headers))
          return false;
      }

      boolean this_present_macros = true && this.isSetMacros();
      boolean that_present_macros = true && that.isSetMacros();
      if (this_present_macros || that_present_macros) {
        if (!(this_present_macros && that_present_macros))
          return false;
        if (!this.macros.equals(that.macros))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProject_id()) ? 131071 : 524287);
      if (isSetProject_id())
        hashCode = hashCode * 8191 + project_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetVersion_id()) ? 131071 : 524287);
      if (isSetVersion_id())
        hashCode = hashCode * 8191 + version_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetBranch_id()) ? 131071 : 524287);
      if (isSetBranch_id())
        hashCode = hashCode * 8191 + branch_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetTester_id()) ? 131071 : 524287);
      if (isSetTester_id())
        hashCode = hashCode * 8191 + tester_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetFiles()) ? 131071 : 524287);
      if (isSetFiles())
        hashCode = hashCode * 8191 + files.hashCode();

      hashCode = hashCode * 8191 + ((isSetHeaders()) ? 131071 : 524287);
      if (isSetHeaders())
        hashCode = hashCode * 8191 + headers.hashCode();

      hashCode = hashCode * 8191 + ((isSetMacros()) ? 131071 : 524287);
      if (isSetMacros())
        hashCode = hashCode * 8191 + macros.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(testcase_gen_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProject_id()).compareTo(other.isSetProject_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProject_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project_id, other.project_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion_id()).compareTo(other.isSetVersion_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_id, other.version_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBranch_id()).compareTo(other.isSetBranch_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBranch_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branch_id, other.branch_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTester_id()).compareTo(other.isSetTester_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTester_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tester_id, other.tester_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFiles()).compareTo(other.isSetFiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.files, other.files);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(other.isSetHeaders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, other.headers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMacros()).compareTo(other.isSetMacros());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMacros()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macros, other.macros);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testcase_gen_args(");
      boolean first = true;

      sb.append("project_id:");
      if (this.project_id == null) {
        sb.append("null");
      } else {
        sb.append(this.project_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version_id:");
      if (this.version_id == null) {
        sb.append("null");
      } else {
        sb.append(this.version_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("branch_id:");
      if (this.branch_id == null) {
        sb.append("null");
      } else {
        sb.append(this.branch_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tester_id:");
      if (this.tester_id == null) {
        sb.append("null");
      } else {
        sb.append(this.tester_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("files:");
      if (this.files == null) {
        sb.append("null");
      } else {
        sb.append(this.files);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("headers:");
      if (this.headers == null) {
        sb.append("null");
      } else {
        sb.append(this.headers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("macros:");
      if (this.macros == null) {
        sb.append("null");
      } else {
        sb.append(this.macros);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testcase_gen_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public testcase_gen_argsStandardScheme getScheme() {
        return new testcase_gen_argsStandardScheme();
      }
    }

    private static class testcase_gen_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<testcase_gen_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testcase_gen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.project_id = iprot.readString();
                struct.setProject_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.version_id = iprot.readString();
                struct.setVersion_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BRANCH_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.branch_id = iprot.readString();
                struct.setBranch_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TESTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tester_id = iprot.readString();
                struct.setTester_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FILES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.files = new java.util.ArrayList<String>(_list24.size);
                  String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.files.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setFilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // HEADERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                  struct.headers = new java.util.ArrayList<String>(_list27.size);
                  String _elem28;
                  for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                  {
                    _elem28 = iprot.readString();
                    struct.headers.add(_elem28);
                  }
                  iprot.readListEnd();
                }
                struct.setHeadersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // MACROS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                  struct.macros = new java.util.ArrayList<Macro>(_list30.size);
                  Macro _elem31;
                  for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                  {
                    _elem31 = new Macro();
                    _elem31.read(iprot);
                    struct.macros.add(_elem31);
                  }
                  iprot.readListEnd();
                }
                struct.setMacrosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testcase_gen_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.project_id != null) {
          oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
          oprot.writeString(struct.project_id);
          oprot.writeFieldEnd();
        }
        if (struct.version_id != null) {
          oprot.writeFieldBegin(VERSION_ID_FIELD_DESC);
          oprot.writeString(struct.version_id);
          oprot.writeFieldEnd();
        }
        if (struct.branch_id != null) {
          oprot.writeFieldBegin(BRANCH_ID_FIELD_DESC);
          oprot.writeString(struct.branch_id);
          oprot.writeFieldEnd();
        }
        if (struct.tester_id != null) {
          oprot.writeFieldBegin(TESTER_ID_FIELD_DESC);
          oprot.writeString(struct.tester_id);
          oprot.writeFieldEnd();
        }
        if (struct.files != null) {
          oprot.writeFieldBegin(FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.files.size()));
            for (String _iter33 : struct.files)
            {
              oprot.writeString(_iter33);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.headers != null) {
          oprot.writeFieldBegin(HEADERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.headers.size()));
            for (String _iter34 : struct.headers)
            {
              oprot.writeString(_iter34);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.macros != null) {
          oprot.writeFieldBegin(MACROS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.macros.size()));
            for (Macro _iter35 : struct.macros)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testcase_gen_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public testcase_gen_argsTupleScheme getScheme() {
        return new testcase_gen_argsTupleScheme();
      }
    }

    private static class testcase_gen_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<testcase_gen_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testcase_gen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProject_id()) {
          optionals.set(0);
        }
        if (struct.isSetVersion_id()) {
          optionals.set(1);
        }
        if (struct.isSetBranch_id()) {
          optionals.set(2);
        }
        if (struct.isSetTester_id()) {
          optionals.set(3);
        }
        if (struct.isSetFiles()) {
          optionals.set(4);
        }
        if (struct.isSetHeaders()) {
          optionals.set(5);
        }
        if (struct.isSetMacros()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProject_id()) {
          oprot.writeString(struct.project_id);
        }
        if (struct.isSetVersion_id()) {
          oprot.writeString(struct.version_id);
        }
        if (struct.isSetBranch_id()) {
          oprot.writeString(struct.branch_id);
        }
        if (struct.isSetTester_id()) {
          oprot.writeString(struct.tester_id);
        }
        if (struct.isSetFiles()) {
          {
            oprot.writeI32(struct.files.size());
            for (String _iter36 : struct.files)
            {
              oprot.writeString(_iter36);
            }
          }
        }
        if (struct.isSetHeaders()) {
          {
            oprot.writeI32(struct.headers.size());
            for (String _iter37 : struct.headers)
            {
              oprot.writeString(_iter37);
            }
          }
        }
        if (struct.isSetMacros()) {
          {
            oprot.writeI32(struct.macros.size());
            for (Macro _iter38 : struct.macros)
            {
              _iter38.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testcase_gen_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.project_id = iprot.readString();
          struct.setProject_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version_id = iprot.readString();
          struct.setVersion_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.branch_id = iprot.readString();
          struct.setBranch_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tester_id = iprot.readString();
          struct.setTester_idIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.files = new java.util.ArrayList<String>(_list39.size);
            String _elem40;
            for (int _i41 = 0; _i41 < _list39.size; ++_i41)
            {
              _elem40 = iprot.readString();
              struct.files.add(_elem40);
            }
          }
          struct.setFilesIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.headers = new java.util.ArrayList<String>(_list42.size);
            String _elem43;
            for (int _i44 = 0; _i44 < _list42.size; ++_i44)
            {
              _elem43 = iprot.readString();
              struct.headers.add(_elem43);
            }
          }
          struct.setHeadersIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.macros = new java.util.ArrayList<Macro>(_list45.size);
            Macro _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new Macro();
              _elem46.read(iprot);
              struct.macros.add(_elem46);
            }
          }
          struct.setMacrosIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class testcase_gen_result implements org.apache.thrift.TBase<testcase_gen_result, testcase_gen_result._Fields>, java.io.Serializable, Cloneable, Comparable<testcase_gen_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testcase_gen_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new testcase_gen_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new testcase_gen_resultTupleSchemeFactory();

    public Task success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Task.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testcase_gen_result.class, metaDataMap);
    }

    public testcase_gen_result() {
    }

    public testcase_gen_result(
      Task success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testcase_gen_result(testcase_gen_result other) {
      if (other.isSetSuccess()) {
        this.success = new Task(other.success);
      }
    }

    public testcase_gen_result deepCopy() {
      return new testcase_gen_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Task getSuccess() {
      return this.success;
    }

    public testcase_gen_result setSuccess(Task success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Task)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testcase_gen_result)
        return this.equals((testcase_gen_result)that);
      return false;
    }

    public boolean equals(testcase_gen_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(testcase_gen_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testcase_gen_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testcase_gen_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public testcase_gen_resultStandardScheme getScheme() {
        return new testcase_gen_resultStandardScheme();
      }
    }

    private static class testcase_gen_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<testcase_gen_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testcase_gen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Task();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testcase_gen_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testcase_gen_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public testcase_gen_resultTupleScheme getScheme() {
        return new testcase_gen_resultTupleScheme();
      }
    }

    private static class testcase_gen_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<testcase_gen_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testcase_gen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testcase_gen_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Task();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class testcase_run_args implements org.apache.thrift.TBase<testcase_run_args, testcase_run_args._Fields>, java.io.Serializable, Cloneable, Comparable<testcase_run_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testcase_run_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("project_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("version_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BRANCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("branch_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TESTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tester_id", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TESTCASES_FIELD_DESC = new org.apache.thrift.protocol.TField("testcases", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField HEADERS_FIELD_DESC = new org.apache.thrift.protocol.TField("headers", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField MACROS_FIELD_DESC = new org.apache.thrift.protocol.TField("macros", org.apache.thrift.protocol.TType.LIST, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new testcase_run_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new testcase_run_argsTupleSchemeFactory();

    public String project_id; // required
    public String version_id; // required
    public String branch_id; // required
    public String tester_id; // required
    public java.util.List<Testcase> testcases; // required
    public java.util.List<String> headers; // required
    public java.util.List<Macro> macros; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "project_id"),
      VERSION_ID((short)2, "version_id"),
      BRANCH_ID((short)3, "branch_id"),
      TESTER_ID((short)4, "tester_id"),
      TESTCASES((short)5, "testcases"),
      HEADERS((short)6, "headers"),
      MACROS((short)7, "macros");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          case 2: // VERSION_ID
            return VERSION_ID;
          case 3: // BRANCH_ID
            return BRANCH_ID;
          case 4: // TESTER_ID
            return TESTER_ID;
          case 5: // TESTCASES
            return TESTCASES;
          case 6: // HEADERS
            return HEADERS;
          case 7: // MACROS
            return MACROS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("project_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("version_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BRANCH_ID, new org.apache.thrift.meta_data.FieldMetaData("branch_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TESTER_ID, new org.apache.thrift.meta_data.FieldMetaData("tester_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TESTCASES, new org.apache.thrift.meta_data.FieldMetaData("testcases", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Testcase.class))));
      tmpMap.put(_Fields.HEADERS, new org.apache.thrift.meta_data.FieldMetaData("headers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.MACROS, new org.apache.thrift.meta_data.FieldMetaData("macros", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Macro.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testcase_run_args.class, metaDataMap);
    }

    public testcase_run_args() {
    }

    public testcase_run_args(
      String project_id,
      String version_id,
      String branch_id,
      String tester_id,
      java.util.List<Testcase> testcases,
      java.util.List<String> headers,
      java.util.List<Macro> macros)
    {
      this();
      this.project_id = project_id;
      this.version_id = version_id;
      this.branch_id = branch_id;
      this.tester_id = tester_id;
      this.testcases = testcases;
      this.headers = headers;
      this.macros = macros;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testcase_run_args(testcase_run_args other) {
      if (other.isSetProject_id()) {
        this.project_id = other.project_id;
      }
      if (other.isSetVersion_id()) {
        this.version_id = other.version_id;
      }
      if (other.isSetBranch_id()) {
        this.branch_id = other.branch_id;
      }
      if (other.isSetTester_id()) {
        this.tester_id = other.tester_id;
      }
      if (other.isSetTestcases()) {
        java.util.List<Testcase> __this__testcases = new java.util.ArrayList<Testcase>(other.testcases.size());
        for (Testcase other_element : other.testcases) {
          __this__testcases.add(new Testcase(other_element));
        }
        this.testcases = __this__testcases;
      }
      if (other.isSetHeaders()) {
        java.util.List<String> __this__headers = new java.util.ArrayList<String>(other.headers);
        this.headers = __this__headers;
      }
      if (other.isSetMacros()) {
        java.util.List<Macro> __this__macros = new java.util.ArrayList<Macro>(other.macros.size());
        for (Macro other_element : other.macros) {
          __this__macros.add(new Macro(other_element));
        }
        this.macros = __this__macros;
      }
    }

    public testcase_run_args deepCopy() {
      return new testcase_run_args(this);
    }

    @Override
    public void clear() {
      this.project_id = null;
      this.version_id = null;
      this.branch_id = null;
      this.tester_id = null;
      this.testcases = null;
      this.headers = null;
      this.macros = null;
    }

    public String getProject_id() {
      return this.project_id;
    }

    public testcase_run_args setProject_id(String project_id) {
      this.project_id = project_id;
      return this;
    }

    public void unsetProject_id() {
      this.project_id = null;
    }

    /** Returns true if field project_id is set (has been assigned a value) and false otherwise */
    public boolean isSetProject_id() {
      return this.project_id != null;
    }

    public void setProject_idIsSet(boolean value) {
      if (!value) {
        this.project_id = null;
      }
    }

    public String getVersion_id() {
      return this.version_id;
    }

    public testcase_run_args setVersion_id(String version_id) {
      this.version_id = version_id;
      return this;
    }

    public void unsetVersion_id() {
      this.version_id = null;
    }

    /** Returns true if field version_id is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion_id() {
      return this.version_id != null;
    }

    public void setVersion_idIsSet(boolean value) {
      if (!value) {
        this.version_id = null;
      }
    }

    public String getBranch_id() {
      return this.branch_id;
    }

    public testcase_run_args setBranch_id(String branch_id) {
      this.branch_id = branch_id;
      return this;
    }

    public void unsetBranch_id() {
      this.branch_id = null;
    }

    /** Returns true if field branch_id is set (has been assigned a value) and false otherwise */
    public boolean isSetBranch_id() {
      return this.branch_id != null;
    }

    public void setBranch_idIsSet(boolean value) {
      if (!value) {
        this.branch_id = null;
      }
    }

    public String getTester_id() {
      return this.tester_id;
    }

    public testcase_run_args setTester_id(String tester_id) {
      this.tester_id = tester_id;
      return this;
    }

    public void unsetTester_id() {
      this.tester_id = null;
    }

    /** Returns true if field tester_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTester_id() {
      return this.tester_id != null;
    }

    public void setTester_idIsSet(boolean value) {
      if (!value) {
        this.tester_id = null;
      }
    }

    public int getTestcasesSize() {
      return (this.testcases == null) ? 0 : this.testcases.size();
    }

    public java.util.Iterator<Testcase> getTestcasesIterator() {
      return (this.testcases == null) ? null : this.testcases.iterator();
    }

    public void addToTestcases(Testcase elem) {
      if (this.testcases == null) {
        this.testcases = new java.util.ArrayList<Testcase>();
      }
      this.testcases.add(elem);
    }

    public java.util.List<Testcase> getTestcases() {
      return this.testcases;
    }

    public testcase_run_args setTestcases(java.util.List<Testcase> testcases) {
      this.testcases = testcases;
      return this;
    }

    public void unsetTestcases() {
      this.testcases = null;
    }

    /** Returns true if field testcases is set (has been assigned a value) and false otherwise */
    public boolean isSetTestcases() {
      return this.testcases != null;
    }

    public void setTestcasesIsSet(boolean value) {
      if (!value) {
        this.testcases = null;
      }
    }

    public int getHeadersSize() {
      return (this.headers == null) ? 0 : this.headers.size();
    }

    public java.util.Iterator<String> getHeadersIterator() {
      return (this.headers == null) ? null : this.headers.iterator();
    }

    public void addToHeaders(String elem) {
      if (this.headers == null) {
        this.headers = new java.util.ArrayList<String>();
      }
      this.headers.add(elem);
    }

    public java.util.List<String> getHeaders() {
      return this.headers;
    }

    public testcase_run_args setHeaders(java.util.List<String> headers) {
      this.headers = headers;
      return this;
    }

    public void unsetHeaders() {
      this.headers = null;
    }

    /** Returns true if field headers is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaders() {
      return this.headers != null;
    }

    public void setHeadersIsSet(boolean value) {
      if (!value) {
        this.headers = null;
      }
    }

    public int getMacrosSize() {
      return (this.macros == null) ? 0 : this.macros.size();
    }

    public java.util.Iterator<Macro> getMacrosIterator() {
      return (this.macros == null) ? null : this.macros.iterator();
    }

    public void addToMacros(Macro elem) {
      if (this.macros == null) {
        this.macros = new java.util.ArrayList<Macro>();
      }
      this.macros.add(elem);
    }

    public java.util.List<Macro> getMacros() {
      return this.macros;
    }

    public testcase_run_args setMacros(java.util.List<Macro> macros) {
      this.macros = macros;
      return this;
    }

    public void unsetMacros() {
      this.macros = null;
    }

    /** Returns true if field macros is set (has been assigned a value) and false otherwise */
    public boolean isSetMacros() {
      return this.macros != null;
    }

    public void setMacrosIsSet(boolean value) {
      if (!value) {
        this.macros = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProject_id();
        } else {
          setProject_id((String)value);
        }
        break;

      case VERSION_ID:
        if (value == null) {
          unsetVersion_id();
        } else {
          setVersion_id((String)value);
        }
        break;

      case BRANCH_ID:
        if (value == null) {
          unsetBranch_id();
        } else {
          setBranch_id((String)value);
        }
        break;

      case TESTER_ID:
        if (value == null) {
          unsetTester_id();
        } else {
          setTester_id((String)value);
        }
        break;

      case TESTCASES:
        if (value == null) {
          unsetTestcases();
        } else {
          setTestcases((java.util.List<Testcase>)value);
        }
        break;

      case HEADERS:
        if (value == null) {
          unsetHeaders();
        } else {
          setHeaders((java.util.List<String>)value);
        }
        break;

      case MACROS:
        if (value == null) {
          unsetMacros();
        } else {
          setMacros((java.util.List<Macro>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return getProject_id();

      case VERSION_ID:
        return getVersion_id();

      case BRANCH_ID:
        return getBranch_id();

      case TESTER_ID:
        return getTester_id();

      case TESTCASES:
        return getTestcases();

      case HEADERS:
        return getHeaders();

      case MACROS:
        return getMacros();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProject_id();
      case VERSION_ID:
        return isSetVersion_id();
      case BRANCH_ID:
        return isSetBranch_id();
      case TESTER_ID:
        return isSetTester_id();
      case TESTCASES:
        return isSetTestcases();
      case HEADERS:
        return isSetHeaders();
      case MACROS:
        return isSetMacros();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testcase_run_args)
        return this.equals((testcase_run_args)that);
      return false;
    }

    public boolean equals(testcase_run_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_project_id = true && this.isSetProject_id();
      boolean that_present_project_id = true && that.isSetProject_id();
      if (this_present_project_id || that_present_project_id) {
        if (!(this_present_project_id && that_present_project_id))
          return false;
        if (!this.project_id.equals(that.project_id))
          return false;
      }

      boolean this_present_version_id = true && this.isSetVersion_id();
      boolean that_present_version_id = true && that.isSetVersion_id();
      if (this_present_version_id || that_present_version_id) {
        if (!(this_present_version_id && that_present_version_id))
          return false;
        if (!this.version_id.equals(that.version_id))
          return false;
      }

      boolean this_present_branch_id = true && this.isSetBranch_id();
      boolean that_present_branch_id = true && that.isSetBranch_id();
      if (this_present_branch_id || that_present_branch_id) {
        if (!(this_present_branch_id && that_present_branch_id))
          return false;
        if (!this.branch_id.equals(that.branch_id))
          return false;
      }

      boolean this_present_tester_id = true && this.isSetTester_id();
      boolean that_present_tester_id = true && that.isSetTester_id();
      if (this_present_tester_id || that_present_tester_id) {
        if (!(this_present_tester_id && that_present_tester_id))
          return false;
        if (!this.tester_id.equals(that.tester_id))
          return false;
      }

      boolean this_present_testcases = true && this.isSetTestcases();
      boolean that_present_testcases = true && that.isSetTestcases();
      if (this_present_testcases || that_present_testcases) {
        if (!(this_present_testcases && that_present_testcases))
          return false;
        if (!this.testcases.equals(that.testcases))
          return false;
      }

      boolean this_present_headers = true && this.isSetHeaders();
      boolean that_present_headers = true && that.isSetHeaders();
      if (this_present_headers || that_present_headers) {
        if (!(this_present_headers && that_present_headers))
          return false;
        if (!this.headers.equals(that.headers))
          return false;
      }

      boolean this_present_macros = true && this.isSetMacros();
      boolean that_present_macros = true && that.isSetMacros();
      if (this_present_macros || that_present_macros) {
        if (!(this_present_macros && that_present_macros))
          return false;
        if (!this.macros.equals(that.macros))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProject_id()) ? 131071 : 524287);
      if (isSetProject_id())
        hashCode = hashCode * 8191 + project_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetVersion_id()) ? 131071 : 524287);
      if (isSetVersion_id())
        hashCode = hashCode * 8191 + version_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetBranch_id()) ? 131071 : 524287);
      if (isSetBranch_id())
        hashCode = hashCode * 8191 + branch_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetTester_id()) ? 131071 : 524287);
      if (isSetTester_id())
        hashCode = hashCode * 8191 + tester_id.hashCode();

      hashCode = hashCode * 8191 + ((isSetTestcases()) ? 131071 : 524287);
      if (isSetTestcases())
        hashCode = hashCode * 8191 + testcases.hashCode();

      hashCode = hashCode * 8191 + ((isSetHeaders()) ? 131071 : 524287);
      if (isSetHeaders())
        hashCode = hashCode * 8191 + headers.hashCode();

      hashCode = hashCode * 8191 + ((isSetMacros()) ? 131071 : 524287);
      if (isSetMacros())
        hashCode = hashCode * 8191 + macros.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(testcase_run_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProject_id()).compareTo(other.isSetProject_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProject_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project_id, other.project_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion_id()).compareTo(other.isSetVersion_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_id, other.version_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBranch_id()).compareTo(other.isSetBranch_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBranch_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.branch_id, other.branch_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTester_id()).compareTo(other.isSetTester_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTester_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tester_id, other.tester_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTestcases()).compareTo(other.isSetTestcases());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTestcases()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testcases, other.testcases);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHeaders()).compareTo(other.isSetHeaders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headers, other.headers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMacros()).compareTo(other.isSetMacros());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMacros()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macros, other.macros);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testcase_run_args(");
      boolean first = true;

      sb.append("project_id:");
      if (this.project_id == null) {
        sb.append("null");
      } else {
        sb.append(this.project_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version_id:");
      if (this.version_id == null) {
        sb.append("null");
      } else {
        sb.append(this.version_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("branch_id:");
      if (this.branch_id == null) {
        sb.append("null");
      } else {
        sb.append(this.branch_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tester_id:");
      if (this.tester_id == null) {
        sb.append("null");
      } else {
        sb.append(this.tester_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("testcases:");
      if (this.testcases == null) {
        sb.append("null");
      } else {
        sb.append(this.testcases);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("headers:");
      if (this.headers == null) {
        sb.append("null");
      } else {
        sb.append(this.headers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("macros:");
      if (this.macros == null) {
        sb.append("null");
      } else {
        sb.append(this.macros);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testcase_run_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public testcase_run_argsStandardScheme getScheme() {
        return new testcase_run_argsStandardScheme();
      }
    }

    private static class testcase_run_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<testcase_run_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testcase_run_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.project_id = iprot.readString();
                struct.setProject_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.version_id = iprot.readString();
                struct.setVersion_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BRANCH_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.branch_id = iprot.readString();
                struct.setBranch_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TESTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tester_id = iprot.readString();
                struct.setTester_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TESTCASES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.testcases = new java.util.ArrayList<Testcase>(_list48.size);
                  Testcase _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new Testcase();
                    _elem49.read(iprot);
                    struct.testcases.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setTestcasesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // HEADERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                  struct.headers = new java.util.ArrayList<String>(_list51.size);
                  String _elem52;
                  for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                  {
                    _elem52 = iprot.readString();
                    struct.headers.add(_elem52);
                  }
                  iprot.readListEnd();
                }
                struct.setHeadersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // MACROS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                  struct.macros = new java.util.ArrayList<Macro>(_list54.size);
                  Macro _elem55;
                  for (int _i56 = 0; _i56 < _list54.size; ++_i56)
                  {
                    _elem55 = new Macro();
                    _elem55.read(iprot);
                    struct.macros.add(_elem55);
                  }
                  iprot.readListEnd();
                }
                struct.setMacrosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testcase_run_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.project_id != null) {
          oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
          oprot.writeString(struct.project_id);
          oprot.writeFieldEnd();
        }
        if (struct.version_id != null) {
          oprot.writeFieldBegin(VERSION_ID_FIELD_DESC);
          oprot.writeString(struct.version_id);
          oprot.writeFieldEnd();
        }
        if (struct.branch_id != null) {
          oprot.writeFieldBegin(BRANCH_ID_FIELD_DESC);
          oprot.writeString(struct.branch_id);
          oprot.writeFieldEnd();
        }
        if (struct.tester_id != null) {
          oprot.writeFieldBegin(TESTER_ID_FIELD_DESC);
          oprot.writeString(struct.tester_id);
          oprot.writeFieldEnd();
        }
        if (struct.testcases != null) {
          oprot.writeFieldBegin(TESTCASES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.testcases.size()));
            for (Testcase _iter57 : struct.testcases)
            {
              _iter57.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.headers != null) {
          oprot.writeFieldBegin(HEADERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.headers.size()));
            for (String _iter58 : struct.headers)
            {
              oprot.writeString(_iter58);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.macros != null) {
          oprot.writeFieldBegin(MACROS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.macros.size()));
            for (Macro _iter59 : struct.macros)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testcase_run_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public testcase_run_argsTupleScheme getScheme() {
        return new testcase_run_argsTupleScheme();
      }
    }

    private static class testcase_run_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<testcase_run_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testcase_run_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProject_id()) {
          optionals.set(0);
        }
        if (struct.isSetVersion_id()) {
          optionals.set(1);
        }
        if (struct.isSetBranch_id()) {
          optionals.set(2);
        }
        if (struct.isSetTester_id()) {
          optionals.set(3);
        }
        if (struct.isSetTestcases()) {
          optionals.set(4);
        }
        if (struct.isSetHeaders()) {
          optionals.set(5);
        }
        if (struct.isSetMacros()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetProject_id()) {
          oprot.writeString(struct.project_id);
        }
        if (struct.isSetVersion_id()) {
          oprot.writeString(struct.version_id);
        }
        if (struct.isSetBranch_id()) {
          oprot.writeString(struct.branch_id);
        }
        if (struct.isSetTester_id()) {
          oprot.writeString(struct.tester_id);
        }
        if (struct.isSetTestcases()) {
          {
            oprot.writeI32(struct.testcases.size());
            for (Testcase _iter60 : struct.testcases)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetHeaders()) {
          {
            oprot.writeI32(struct.headers.size());
            for (String _iter61 : struct.headers)
            {
              oprot.writeString(_iter61);
            }
          }
        }
        if (struct.isSetMacros()) {
          {
            oprot.writeI32(struct.macros.size());
            for (Macro _iter62 : struct.macros)
            {
              _iter62.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testcase_run_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.project_id = iprot.readString();
          struct.setProject_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version_id = iprot.readString();
          struct.setVersion_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.branch_id = iprot.readString();
          struct.setBranch_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tester_id = iprot.readString();
          struct.setTester_idIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.testcases = new java.util.ArrayList<Testcase>(_list63.size);
            Testcase _elem64;
            for (int _i65 = 0; _i65 < _list63.size; ++_i65)
            {
              _elem64 = new Testcase();
              _elem64.read(iprot);
              struct.testcases.add(_elem64);
            }
          }
          struct.setTestcasesIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.headers = new java.util.ArrayList<String>(_list66.size);
            String _elem67;
            for (int _i68 = 0; _i68 < _list66.size; ++_i68)
            {
              _elem67 = iprot.readString();
              struct.headers.add(_elem67);
            }
          }
          struct.setHeadersIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.macros = new java.util.ArrayList<Macro>(_list69.size);
            Macro _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new Macro();
              _elem70.read(iprot);
              struct.macros.add(_elem70);
            }
          }
          struct.setMacrosIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class testcase_run_result implements org.apache.thrift.TBase<testcase_run_result, testcase_run_result._Fields>, java.io.Serializable, Cloneable, Comparable<testcase_run_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("testcase_run_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new testcase_run_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new testcase_run_resultTupleSchemeFactory();

    public Task success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Task.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testcase_run_result.class, metaDataMap);
    }

    public testcase_run_result() {
    }

    public testcase_run_result(
      Task success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public testcase_run_result(testcase_run_result other) {
      if (other.isSetSuccess()) {
        this.success = new Task(other.success);
      }
    }

    public testcase_run_result deepCopy() {
      return new testcase_run_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Task getSuccess() {
      return this.success;
    }

    public testcase_run_result setSuccess(Task success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Task)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof testcase_run_result)
        return this.equals((testcase_run_result)that);
      return false;
    }

    public boolean equals(testcase_run_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(testcase_run_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("testcase_run_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class testcase_run_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public testcase_run_resultStandardScheme getScheme() {
        return new testcase_run_resultStandardScheme();
      }
    }

    private static class testcase_run_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<testcase_run_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, testcase_run_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Task();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, testcase_run_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class testcase_run_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public testcase_run_resultTupleScheme getScheme() {
        return new testcase_run_resultTupleScheme();
      }
    }

    private static class testcase_run_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<testcase_run_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, testcase_run_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, testcase_run_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Task();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class license_register_args implements org.apache.thrift.TBase<license_register_args, license_register_args._Fields>, java.io.Serializable, Cloneable, Comparable<license_register_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("license_register_args");

    private static final org.apache.thrift.protocol.TField LICENSE_FIELD_DESC = new org.apache.thrift.protocol.TField("license", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new license_register_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new license_register_argsTupleSchemeFactory();

    public String license; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LICENSE((short)1, "license");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LICENSE
            return LICENSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LICENSE, new org.apache.thrift.meta_data.FieldMetaData("license", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(license_register_args.class, metaDataMap);
    }

    public license_register_args() {
    }

    public license_register_args(
      String license)
    {
      this();
      this.license = license;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public license_register_args(license_register_args other) {
      if (other.isSetLicense()) {
        this.license = other.license;
      }
    }

    public license_register_args deepCopy() {
      return new license_register_args(this);
    }

    @Override
    public void clear() {
      this.license = null;
    }

    public String getLicense() {
      return this.license;
    }

    public license_register_args setLicense(String license) {
      this.license = license;
      return this;
    }

    public void unsetLicense() {
      this.license = null;
    }

    /** Returns true if field license is set (has been assigned a value) and false otherwise */
    public boolean isSetLicense() {
      return this.license != null;
    }

    public void setLicenseIsSet(boolean value) {
      if (!value) {
        this.license = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LICENSE:
        if (value == null) {
          unsetLicense();
        } else {
          setLicense((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LICENSE:
        return getLicense();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LICENSE:
        return isSetLicense();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof license_register_args)
        return this.equals((license_register_args)that);
      return false;
    }

    public boolean equals(license_register_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_license = true && this.isSetLicense();
      boolean that_present_license = true && that.isSetLicense();
      if (this_present_license || that_present_license) {
        if (!(this_present_license && that_present_license))
          return false;
        if (!this.license.equals(that.license))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLicense()) ? 131071 : 524287);
      if (isSetLicense())
        hashCode = hashCode * 8191 + license.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(license_register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLicense()).compareTo(other.isSetLicense());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLicense()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.license, other.license);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("license_register_args(");
      boolean first = true;

      sb.append("license:");
      if (this.license == null) {
        sb.append("null");
      } else {
        sb.append(this.license);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class license_register_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public license_register_argsStandardScheme getScheme() {
        return new license_register_argsStandardScheme();
      }
    }

    private static class license_register_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<license_register_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, license_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LICENSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.license = iprot.readString();
                struct.setLicenseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, license_register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.license != null) {
          oprot.writeFieldBegin(LICENSE_FIELD_DESC);
          oprot.writeString(struct.license);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class license_register_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public license_register_argsTupleScheme getScheme() {
        return new license_register_argsTupleScheme();
      }
    }

    private static class license_register_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<license_register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, license_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLicense()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLicense()) {
          oprot.writeString(struct.license);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, license_register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.license = iprot.readString();
          struct.setLicenseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class license_register_result implements org.apache.thrift.TBase<license_register_result, license_register_result._Fields>, java.io.Serializable, Cloneable, Comparable<license_register_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("license_register_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new license_register_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new license_register_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(license_register_result.class, metaDataMap);
    }

    public license_register_result() {
    }

    public license_register_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public license_register_result(license_register_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public license_register_result deepCopy() {
      return new license_register_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public license_register_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof license_register_result)
        return this.equals((license_register_result)that);
      return false;
    }

    public boolean equals(license_register_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(license_register_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("license_register_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class license_register_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public license_register_resultStandardScheme getScheme() {
        return new license_register_resultStandardScheme();
      }
    }

    private static class license_register_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<license_register_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, license_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, license_register_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class license_register_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public license_register_resultTupleScheme getScheme() {
        return new license_register_resultTupleScheme();
      }
    }

    private static class license_register_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<license_register_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, license_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, license_register_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class license_query_args implements org.apache.thrift.TBase<license_query_args, license_query_args._Fields>, java.io.Serializable, Cloneable, Comparable<license_query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("license_query_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new license_query_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new license_query_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(license_query_args.class, metaDataMap);
    }

    public license_query_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public license_query_args(license_query_args other) {
    }

    public license_query_args deepCopy() {
      return new license_query_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof license_query_args)
        return this.equals((license_query_args)that);
      return false;
    }

    public boolean equals(license_query_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(license_query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("license_query_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class license_query_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public license_query_argsStandardScheme getScheme() {
        return new license_query_argsStandardScheme();
      }
    }

    private static class license_query_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<license_query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, license_query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, license_query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class license_query_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public license_query_argsTupleScheme getScheme() {
        return new license_query_argsTupleScheme();
      }
    }

    private static class license_query_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<license_query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, license_query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, license_query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class license_query_result implements org.apache.thrift.TBase<license_query_result, license_query_result._Fields>, java.io.Serializable, Cloneable, Comparable<license_query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("license_query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new license_query_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new license_query_resultTupleSchemeFactory();

    public License success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, License.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(license_query_result.class, metaDataMap);
    }

    public license_query_result() {
    }

    public license_query_result(
      License success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public license_query_result(license_query_result other) {
      if (other.isSetSuccess()) {
        this.success = new License(other.success);
      }
    }

    public license_query_result deepCopy() {
      return new license_query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public License getSuccess() {
      return this.success;
    }

    public license_query_result setSuccess(License success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((License)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof license_query_result)
        return this.equals((license_query_result)that);
      return false;
    }

    public boolean equals(license_query_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(license_query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("license_query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class license_query_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public license_query_resultStandardScheme getScheme() {
        return new license_query_resultStandardScheme();
      }
    }

    private static class license_query_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<license_query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, license_query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new License();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, license_query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class license_query_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public license_query_resultTupleScheme getScheme() {
        return new license_query_resultTupleScheme();
      }
    }

    private static class license_query_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<license_query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, license_query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, license_query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new License();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class task_query_args implements org.apache.thrift.TBase<task_query_args, task_query_args._Fields>, java.io.Serializable, Cloneable, Comparable<task_query_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_query_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new task_query_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new task_query_argsTupleSchemeFactory();

    public String task_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "task_id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_query_args.class, metaDataMap);
    }

    public task_query_args() {
    }

    public task_query_args(
      String task_id)
    {
      this();
      this.task_id = task_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_query_args(task_query_args other) {
      if (other.isSetTask_id()) {
        this.task_id = other.task_id;
      }
    }

    public task_query_args deepCopy() {
      return new task_query_args(this);
    }

    @Override
    public void clear() {
      this.task_id = null;
    }

    public String getTask_id() {
      return this.task_id;
    }

    public task_query_args setTask_id(String task_id) {
      this.task_id = task_id;
      return this;
    }

    public void unsetTask_id() {
      this.task_id = null;
    }

    /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTask_id() {
      return this.task_id != null;
    }

    public void setTask_idIsSet(boolean value) {
      if (!value) {
        this.task_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTask_id();
        } else {
          setTask_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTask_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTask_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_query_args)
        return this.equals((task_query_args)that);
      return false;
    }

    public boolean equals(task_query_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_task_id = true && this.isSetTask_id();
      boolean that_present_task_id = true && that.isSetTask_id();
      if (this_present_task_id || that_present_task_id) {
        if (!(this_present_task_id && that_present_task_id))
          return false;
        if (!this.task_id.equals(that.task_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTask_id()) ? 131071 : 524287);
      if (isSetTask_id())
        hashCode = hashCode * 8191 + task_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(task_query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_query_args(");
      boolean first = true;

      sb.append("task_id:");
      if (this.task_id == null) {
        sb.append("null");
      } else {
        sb.append(this.task_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_query_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_query_argsStandardScheme getScheme() {
        return new task_query_argsStandardScheme();
      }
    }

    private static class task_query_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<task_query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.task_id = iprot.readString();
                struct.setTask_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task_id != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.task_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_query_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_query_argsTupleScheme getScheme() {
        return new task_query_argsTupleScheme();
      }
    }

    private static class task_query_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<task_query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTask_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask_id()) {
          oprot.writeString(struct.task_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task_id = iprot.readString();
          struct.setTask_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class task_query_result implements org.apache.thrift.TBase<task_query_result, task_query_result._Fields>, java.io.Serializable, Cloneable, Comparable<task_query_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new task_query_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new task_query_resultTupleSchemeFactory();

    public java.util.List<Task> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Task.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_query_result.class, metaDataMap);
    }

    public task_query_result() {
    }

    public task_query_result(
      java.util.List<Task> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_query_result(task_query_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Task> __this__success = new java.util.ArrayList<Task>(other.success.size());
        for (Task other_element : other.success) {
          __this__success.add(new Task(other_element));
        }
        this.success = __this__success;
      }
    }

    public task_query_result deepCopy() {
      return new task_query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Task> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Task elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Task>();
      }
      this.success.add(elem);
    }

    public java.util.List<Task> getSuccess() {
      return this.success;
    }

    public task_query_result setSuccess(java.util.List<Task> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Task>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_query_result)
        return this.equals((task_query_result)that);
      return false;
    }

    public boolean equals(task_query_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(task_query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_query_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_query_resultStandardScheme getScheme() {
        return new task_query_resultStandardScheme();
      }
    }

    private static class task_query_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<task_query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Task>(_list72.size);
                  Task _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new Task();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Task _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_query_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_query_resultTupleScheme getScheme() {
        return new task_query_resultTupleScheme();
      }
    }

    private static class task_query_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<task_query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Task _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Task>(_list77.size);
            Task _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new Task();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class task_pause_args implements org.apache.thrift.TBase<task_pause_args, task_pause_args._Fields>, java.io.Serializable, Cloneable, Comparable<task_pause_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_pause_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new task_pause_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new task_pause_argsTupleSchemeFactory();

    public String task_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "task_id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_pause_args.class, metaDataMap);
    }

    public task_pause_args() {
    }

    public task_pause_args(
      String task_id)
    {
      this();
      this.task_id = task_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_pause_args(task_pause_args other) {
      if (other.isSetTask_id()) {
        this.task_id = other.task_id;
      }
    }

    public task_pause_args deepCopy() {
      return new task_pause_args(this);
    }

    @Override
    public void clear() {
      this.task_id = null;
    }

    public String getTask_id() {
      return this.task_id;
    }

    public task_pause_args setTask_id(String task_id) {
      this.task_id = task_id;
      return this;
    }

    public void unsetTask_id() {
      this.task_id = null;
    }

    /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTask_id() {
      return this.task_id != null;
    }

    public void setTask_idIsSet(boolean value) {
      if (!value) {
        this.task_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTask_id();
        } else {
          setTask_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTask_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTask_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_pause_args)
        return this.equals((task_pause_args)that);
      return false;
    }

    public boolean equals(task_pause_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_task_id = true && this.isSetTask_id();
      boolean that_present_task_id = true && that.isSetTask_id();
      if (this_present_task_id || that_present_task_id) {
        if (!(this_present_task_id && that_present_task_id))
          return false;
        if (!this.task_id.equals(that.task_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTask_id()) ? 131071 : 524287);
      if (isSetTask_id())
        hashCode = hashCode * 8191 + task_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(task_pause_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_pause_args(");
      boolean first = true;

      sb.append("task_id:");
      if (this.task_id == null) {
        sb.append("null");
      } else {
        sb.append(this.task_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_pause_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_pause_argsStandardScheme getScheme() {
        return new task_pause_argsStandardScheme();
      }
    }

    private static class task_pause_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<task_pause_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_pause_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.task_id = iprot.readString();
                struct.setTask_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_pause_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task_id != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.task_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_pause_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_pause_argsTupleScheme getScheme() {
        return new task_pause_argsTupleScheme();
      }
    }

    private static class task_pause_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<task_pause_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_pause_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTask_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask_id()) {
          oprot.writeString(struct.task_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_pause_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task_id = iprot.readString();
          struct.setTask_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class task_pause_result implements org.apache.thrift.TBase<task_pause_result, task_pause_result._Fields>, java.io.Serializable, Cloneable, Comparable<task_pause_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_pause_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new task_pause_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new task_pause_resultTupleSchemeFactory();

    public Task success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Task.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_pause_result.class, metaDataMap);
    }

    public task_pause_result() {
    }

    public task_pause_result(
      Task success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_pause_result(task_pause_result other) {
      if (other.isSetSuccess()) {
        this.success = new Task(other.success);
      }
    }

    public task_pause_result deepCopy() {
      return new task_pause_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Task getSuccess() {
      return this.success;
    }

    public task_pause_result setSuccess(Task success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Task)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_pause_result)
        return this.equals((task_pause_result)that);
      return false;
    }

    public boolean equals(task_pause_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(task_pause_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_pause_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_pause_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_pause_resultStandardScheme getScheme() {
        return new task_pause_resultStandardScheme();
      }
    }

    private static class task_pause_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<task_pause_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_pause_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Task();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_pause_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_pause_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_pause_resultTupleScheme getScheme() {
        return new task_pause_resultTupleScheme();
      }
    }

    private static class task_pause_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<task_pause_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_pause_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_pause_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Task();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class task_resume_args implements org.apache.thrift.TBase<task_resume_args, task_resume_args._Fields>, java.io.Serializable, Cloneable, Comparable<task_resume_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_resume_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new task_resume_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new task_resume_argsTupleSchemeFactory();

    public String task_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "task_id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_resume_args.class, metaDataMap);
    }

    public task_resume_args() {
    }

    public task_resume_args(
      String task_id)
    {
      this();
      this.task_id = task_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_resume_args(task_resume_args other) {
      if (other.isSetTask_id()) {
        this.task_id = other.task_id;
      }
    }

    public task_resume_args deepCopy() {
      return new task_resume_args(this);
    }

    @Override
    public void clear() {
      this.task_id = null;
    }

    public String getTask_id() {
      return this.task_id;
    }

    public task_resume_args setTask_id(String task_id) {
      this.task_id = task_id;
      return this;
    }

    public void unsetTask_id() {
      this.task_id = null;
    }

    /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTask_id() {
      return this.task_id != null;
    }

    public void setTask_idIsSet(boolean value) {
      if (!value) {
        this.task_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTask_id();
        } else {
          setTask_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTask_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTask_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_resume_args)
        return this.equals((task_resume_args)that);
      return false;
    }

    public boolean equals(task_resume_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_task_id = true && this.isSetTask_id();
      boolean that_present_task_id = true && that.isSetTask_id();
      if (this_present_task_id || that_present_task_id) {
        if (!(this_present_task_id && that_present_task_id))
          return false;
        if (!this.task_id.equals(that.task_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTask_id()) ? 131071 : 524287);
      if (isSetTask_id())
        hashCode = hashCode * 8191 + task_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(task_resume_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_resume_args(");
      boolean first = true;

      sb.append("task_id:");
      if (this.task_id == null) {
        sb.append("null");
      } else {
        sb.append(this.task_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_resume_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_resume_argsStandardScheme getScheme() {
        return new task_resume_argsStandardScheme();
      }
    }

    private static class task_resume_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<task_resume_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_resume_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.task_id = iprot.readString();
                struct.setTask_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_resume_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task_id != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.task_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_resume_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_resume_argsTupleScheme getScheme() {
        return new task_resume_argsTupleScheme();
      }
    }

    private static class task_resume_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<task_resume_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_resume_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTask_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask_id()) {
          oprot.writeString(struct.task_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_resume_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task_id = iprot.readString();
          struct.setTask_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class task_resume_result implements org.apache.thrift.TBase<task_resume_result, task_resume_result._Fields>, java.io.Serializable, Cloneable, Comparable<task_resume_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_resume_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new task_resume_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new task_resume_resultTupleSchemeFactory();

    public Task success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Task.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_resume_result.class, metaDataMap);
    }

    public task_resume_result() {
    }

    public task_resume_result(
      Task success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_resume_result(task_resume_result other) {
      if (other.isSetSuccess()) {
        this.success = new Task(other.success);
      }
    }

    public task_resume_result deepCopy() {
      return new task_resume_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Task getSuccess() {
      return this.success;
    }

    public task_resume_result setSuccess(Task success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Task)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_resume_result)
        return this.equals((task_resume_result)that);
      return false;
    }

    public boolean equals(task_resume_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(task_resume_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_resume_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_resume_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_resume_resultStandardScheme getScheme() {
        return new task_resume_resultStandardScheme();
      }
    }

    private static class task_resume_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<task_resume_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_resume_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Task();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_resume_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_resume_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_resume_resultTupleScheme getScheme() {
        return new task_resume_resultTupleScheme();
      }
    }

    private static class task_resume_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<task_resume_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_resume_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_resume_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Task();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class task_cancel_args implements org.apache.thrift.TBase<task_cancel_args, task_cancel_args._Fields>, java.io.Serializable, Cloneable, Comparable<task_cancel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_cancel_args");

    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new task_cancel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new task_cancel_argsTupleSchemeFactory();

    public String task_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TASK_ID((short)1, "task_id");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_cancel_args.class, metaDataMap);
    }

    public task_cancel_args() {
    }

    public task_cancel_args(
      String task_id)
    {
      this();
      this.task_id = task_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_cancel_args(task_cancel_args other) {
      if (other.isSetTask_id()) {
        this.task_id = other.task_id;
      }
    }

    public task_cancel_args deepCopy() {
      return new task_cancel_args(this);
    }

    @Override
    public void clear() {
      this.task_id = null;
    }

    public String getTask_id() {
      return this.task_id;
    }

    public task_cancel_args setTask_id(String task_id) {
      this.task_id = task_id;
      return this;
    }

    public void unsetTask_id() {
      this.task_id = null;
    }

    /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTask_id() {
      return this.task_id != null;
    }

    public void setTask_idIsSet(boolean value) {
      if (!value) {
        this.task_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTask_id();
        } else {
          setTask_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTask_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTask_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_cancel_args)
        return this.equals((task_cancel_args)that);
      return false;
    }

    public boolean equals(task_cancel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_task_id = true && this.isSetTask_id();
      boolean that_present_task_id = true && that.isSetTask_id();
      if (this_present_task_id || that_present_task_id) {
        if (!(this_present_task_id && that_present_task_id))
          return false;
        if (!this.task_id.equals(that.task_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTask_id()) ? 131071 : 524287);
      if (isSetTask_id())
        hashCode = hashCode * 8191 + task_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(task_cancel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTask_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_cancel_args(");
      boolean first = true;

      sb.append("task_id:");
      if (this.task_id == null) {
        sb.append("null");
      } else {
        sb.append(this.task_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_cancel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_cancel_argsStandardScheme getScheme() {
        return new task_cancel_argsStandardScheme();
      }
    }

    private static class task_cancel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<task_cancel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.task_id = iprot.readString();
                struct.setTask_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_cancel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.task_id != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.task_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_cancel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_cancel_argsTupleScheme getScheme() {
        return new task_cancel_argsTupleScheme();
      }
    }

    private static class task_cancel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<task_cancel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTask_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTask_id()) {
          oprot.writeString(struct.task_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.task_id = iprot.readString();
          struct.setTask_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class task_cancel_result implements org.apache.thrift.TBase<task_cancel_result, task_cancel_result._Fields>, java.io.Serializable, Cloneable, Comparable<task_cancel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("task_cancel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new task_cancel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new task_cancel_resultTupleSchemeFactory();

    public Task success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Task.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(task_cancel_result.class, metaDataMap);
    }

    public task_cancel_result() {
    }

    public task_cancel_result(
      Task success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public task_cancel_result(task_cancel_result other) {
      if (other.isSetSuccess()) {
        this.success = new Task(other.success);
      }
    }

    public task_cancel_result deepCopy() {
      return new task_cancel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Task getSuccess() {
      return this.success;
    }

    public task_cancel_result setSuccess(Task success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Task)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof task_cancel_result)
        return this.equals((task_cancel_result)that);
      return false;
    }

    public boolean equals(task_cancel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(task_cancel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("task_cancel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class task_cancel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_cancel_resultStandardScheme getScheme() {
        return new task_cancel_resultStandardScheme();
      }
    }

    private static class task_cancel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<task_cancel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, task_cancel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Task();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, task_cancel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class task_cancel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public task_cancel_resultTupleScheme getScheme() {
        return new task_cancel_resultTupleScheme();
      }
    }

    private static class task_cancel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<task_cancel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, task_cancel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, task_cancel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Task();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
