/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rocket;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-29")
public class License implements org.apache.thrift.TBase<License, License._Fields>, java.io.Serializable, Cloneable, Comparable<License> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("License");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("company", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXPIRED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("expired_date", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField N_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("n_days", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField N_REMAINDER_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("n_remainder_days", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField N_CPUS_FIELD_DESC = new org.apache.thrift.protocol.TField("n_cpus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField N_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("n_users", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField N_ONLINE_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("n_online_users", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField N_CPUS_OF_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("n_cpus_of_platform", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField N_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("n_tasks", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField N_USERS_OF_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("n_users_of_tasks", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LicenseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LicenseTupleSchemeFactory();

  public String code; // required
  public String company; // required
  public String expired_date; // required
  public int n_days; // required
  public int n_remainder_days; // required
  public int n_cpus; // required
  public int n_users; // required
  public int n_online_users; // required
  public int n_cpus_of_platform; // required
  public int n_tasks; // required
  public int n_users_of_tasks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE((short)1, "code"),
    COMPANY((short)2, "company"),
    EXPIRED_DATE((short)3, "expired_date"),
    N_DAYS((short)4, "n_days"),
    N_REMAINDER_DAYS((short)5, "n_remainder_days"),
    N_CPUS((short)6, "n_cpus"),
    N_USERS((short)7, "n_users"),
    N_ONLINE_USERS((short)8, "n_online_users"),
    N_CPUS_OF_PLATFORM((short)9, "n_cpus_of_platform"),
    N_TASKS((short)10, "n_tasks"),
    N_USERS_OF_TASKS((short)11, "n_users_of_tasks");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // COMPANY
          return COMPANY;
        case 3: // EXPIRED_DATE
          return EXPIRED_DATE;
        case 4: // N_DAYS
          return N_DAYS;
        case 5: // N_REMAINDER_DAYS
          return N_REMAINDER_DAYS;
        case 6: // N_CPUS
          return N_CPUS;
        case 7: // N_USERS
          return N_USERS;
        case 8: // N_ONLINE_USERS
          return N_ONLINE_USERS;
        case 9: // N_CPUS_OF_PLATFORM
          return N_CPUS_OF_PLATFORM;
        case 10: // N_TASKS
          return N_TASKS;
        case 11: // N_USERS_OF_TASKS
          return N_USERS_OF_TASKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __N_DAYS_ISSET_ID = 0;
  private static final int __N_REMAINDER_DAYS_ISSET_ID = 1;
  private static final int __N_CPUS_ISSET_ID = 2;
  private static final int __N_USERS_ISSET_ID = 3;
  private static final int __N_ONLINE_USERS_ISSET_ID = 4;
  private static final int __N_CPUS_OF_PLATFORM_ISSET_ID = 5;
  private static final int __N_TASKS_ISSET_ID = 6;
  private static final int __N_USERS_OF_TASKS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY, new org.apache.thrift.meta_data.FieldMetaData("company", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRED_DATE, new org.apache.thrift.meta_data.FieldMetaData("expired_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "datetime_t")));
    tmpMap.put(_Fields.N_DAYS, new org.apache.thrift.meta_data.FieldMetaData("n_days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_REMAINDER_DAYS, new org.apache.thrift.meta_data.FieldMetaData("n_remainder_days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_CPUS, new org.apache.thrift.meta_data.FieldMetaData("n_cpus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_USERS, new org.apache.thrift.meta_data.FieldMetaData("n_users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_ONLINE_USERS, new org.apache.thrift.meta_data.FieldMetaData("n_online_users", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_CPUS_OF_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("n_cpus_of_platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_TASKS, new org.apache.thrift.meta_data.FieldMetaData("n_tasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.N_USERS_OF_TASKS, new org.apache.thrift.meta_data.FieldMetaData("n_users_of_tasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(License.class, metaDataMap);
  }

  public License() {
  }

  public License(
    String code,
    String company,
    String expired_date,
    int n_days,
    int n_remainder_days,
    int n_cpus,
    int n_users,
    int n_online_users,
    int n_cpus_of_platform,
    int n_tasks,
    int n_users_of_tasks)
  {
    this();
    this.code = code;
    this.company = company;
    this.expired_date = expired_date;
    this.n_days = n_days;
    setN_daysIsSet(true);
    this.n_remainder_days = n_remainder_days;
    setN_remainder_daysIsSet(true);
    this.n_cpus = n_cpus;
    setN_cpusIsSet(true);
    this.n_users = n_users;
    setN_usersIsSet(true);
    this.n_online_users = n_online_users;
    setN_online_usersIsSet(true);
    this.n_cpus_of_platform = n_cpus_of_platform;
    setN_cpus_of_platformIsSet(true);
    this.n_tasks = n_tasks;
    setN_tasksIsSet(true);
    this.n_users_of_tasks = n_users_of_tasks;
    setN_users_of_tasksIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public License(License other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetCompany()) {
      this.company = other.company;
    }
    if (other.isSetExpired_date()) {
      this.expired_date = other.expired_date;
    }
    this.n_days = other.n_days;
    this.n_remainder_days = other.n_remainder_days;
    this.n_cpus = other.n_cpus;
    this.n_users = other.n_users;
    this.n_online_users = other.n_online_users;
    this.n_cpus_of_platform = other.n_cpus_of_platform;
    this.n_tasks = other.n_tasks;
    this.n_users_of_tasks = other.n_users_of_tasks;
  }

  public License deepCopy() {
    return new License(this);
  }

  @Override
  public void clear() {
    this.code = null;
    this.company = null;
    this.expired_date = null;
    setN_daysIsSet(false);
    this.n_days = 0;
    setN_remainder_daysIsSet(false);
    this.n_remainder_days = 0;
    setN_cpusIsSet(false);
    this.n_cpus = 0;
    setN_usersIsSet(false);
    this.n_users = 0;
    setN_online_usersIsSet(false);
    this.n_online_users = 0;
    setN_cpus_of_platformIsSet(false);
    this.n_cpus_of_platform = 0;
    setN_tasksIsSet(false);
    this.n_tasks = 0;
    setN_users_of_tasksIsSet(false);
    this.n_users_of_tasks = 0;
  }

  public String getCode() {
    return this.code;
  }

  public License setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getCompany() {
    return this.company;
  }

  public License setCompany(String company) {
    this.company = company;
    return this;
  }

  public void unsetCompany() {
    this.company = null;
  }

  /** Returns true if field company is set (has been assigned a value) and false otherwise */
  public boolean isSetCompany() {
    return this.company != null;
  }

  public void setCompanyIsSet(boolean value) {
    if (!value) {
      this.company = null;
    }
  }

  public String getExpired_date() {
    return this.expired_date;
  }

  public License setExpired_date(String expired_date) {
    this.expired_date = expired_date;
    return this;
  }

  public void unsetExpired_date() {
    this.expired_date = null;
  }

  /** Returns true if field expired_date is set (has been assigned a value) and false otherwise */
  public boolean isSetExpired_date() {
    return this.expired_date != null;
  }

  public void setExpired_dateIsSet(boolean value) {
    if (!value) {
      this.expired_date = null;
    }
  }

  public int getN_days() {
    return this.n_days;
  }

  public License setN_days(int n_days) {
    this.n_days = n_days;
    setN_daysIsSet(true);
    return this;
  }

  public void unsetN_days() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N_DAYS_ISSET_ID);
  }

  /** Returns true if field n_days is set (has been assigned a value) and false otherwise */
  public boolean isSetN_days() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N_DAYS_ISSET_ID);
  }

  public void setN_daysIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N_DAYS_ISSET_ID, value);
  }

  public int getN_remainder_days() {
    return this.n_remainder_days;
  }

  public License setN_remainder_days(int n_remainder_days) {
    this.n_remainder_days = n_remainder_days;
    setN_remainder_daysIsSet(true);
    return this;
  }

  public void unsetN_remainder_days() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N_REMAINDER_DAYS_ISSET_ID);
  }

  /** Returns true if field n_remainder_days is set (has been assigned a value) and false otherwise */
  public boolean isSetN_remainder_days() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N_REMAINDER_DAYS_ISSET_ID);
  }

  public void setN_remainder_daysIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N_REMAINDER_DAYS_ISSET_ID, value);
  }

  public int getN_cpus() {
    return this.n_cpus;
  }

  public License setN_cpus(int n_cpus) {
    this.n_cpus = n_cpus;
    setN_cpusIsSet(true);
    return this;
  }

  public void unsetN_cpus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N_CPUS_ISSET_ID);
  }

  /** Returns true if field n_cpus is set (has been assigned a value) and false otherwise */
  public boolean isSetN_cpus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N_CPUS_ISSET_ID);
  }

  public void setN_cpusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N_CPUS_ISSET_ID, value);
  }

  public int getN_users() {
    return this.n_users;
  }

  public License setN_users(int n_users) {
    this.n_users = n_users;
    setN_usersIsSet(true);
    return this;
  }

  public void unsetN_users() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N_USERS_ISSET_ID);
  }

  /** Returns true if field n_users is set (has been assigned a value) and false otherwise */
  public boolean isSetN_users() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N_USERS_ISSET_ID);
  }

  public void setN_usersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N_USERS_ISSET_ID, value);
  }

  public int getN_online_users() {
    return this.n_online_users;
  }

  public License setN_online_users(int n_online_users) {
    this.n_online_users = n_online_users;
    setN_online_usersIsSet(true);
    return this;
  }

  public void unsetN_online_users() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N_ONLINE_USERS_ISSET_ID);
  }

  /** Returns true if field n_online_users is set (has been assigned a value) and false otherwise */
  public boolean isSetN_online_users() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N_ONLINE_USERS_ISSET_ID);
  }

  public void setN_online_usersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N_ONLINE_USERS_ISSET_ID, value);
  }

  public int getN_cpus_of_platform() {
    return this.n_cpus_of_platform;
  }

  public License setN_cpus_of_platform(int n_cpus_of_platform) {
    this.n_cpus_of_platform = n_cpus_of_platform;
    setN_cpus_of_platformIsSet(true);
    return this;
  }

  public void unsetN_cpus_of_platform() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N_CPUS_OF_PLATFORM_ISSET_ID);
  }

  /** Returns true if field n_cpus_of_platform is set (has been assigned a value) and false otherwise */
  public boolean isSetN_cpus_of_platform() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N_CPUS_OF_PLATFORM_ISSET_ID);
  }

  public void setN_cpus_of_platformIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N_CPUS_OF_PLATFORM_ISSET_ID, value);
  }

  public int getN_tasks() {
    return this.n_tasks;
  }

  public License setN_tasks(int n_tasks) {
    this.n_tasks = n_tasks;
    setN_tasksIsSet(true);
    return this;
  }

  public void unsetN_tasks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N_TASKS_ISSET_ID);
  }

  /** Returns true if field n_tasks is set (has been assigned a value) and false otherwise */
  public boolean isSetN_tasks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N_TASKS_ISSET_ID);
  }

  public void setN_tasksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N_TASKS_ISSET_ID, value);
  }

  public int getN_users_of_tasks() {
    return this.n_users_of_tasks;
  }

  public License setN_users_of_tasks(int n_users_of_tasks) {
    this.n_users_of_tasks = n_users_of_tasks;
    setN_users_of_tasksIsSet(true);
    return this;
  }

  public void unsetN_users_of_tasks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __N_USERS_OF_TASKS_ISSET_ID);
  }

  /** Returns true if field n_users_of_tasks is set (has been assigned a value) and false otherwise */
  public boolean isSetN_users_of_tasks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __N_USERS_OF_TASKS_ISSET_ID);
  }

  public void setN_users_of_tasksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __N_USERS_OF_TASKS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case COMPANY:
      if (value == null) {
        unsetCompany();
      } else {
        setCompany((String)value);
      }
      break;

    case EXPIRED_DATE:
      if (value == null) {
        unsetExpired_date();
      } else {
        setExpired_date((String)value);
      }
      break;

    case N_DAYS:
      if (value == null) {
        unsetN_days();
      } else {
        setN_days((Integer)value);
      }
      break;

    case N_REMAINDER_DAYS:
      if (value == null) {
        unsetN_remainder_days();
      } else {
        setN_remainder_days((Integer)value);
      }
      break;

    case N_CPUS:
      if (value == null) {
        unsetN_cpus();
      } else {
        setN_cpus((Integer)value);
      }
      break;

    case N_USERS:
      if (value == null) {
        unsetN_users();
      } else {
        setN_users((Integer)value);
      }
      break;

    case N_ONLINE_USERS:
      if (value == null) {
        unsetN_online_users();
      } else {
        setN_online_users((Integer)value);
      }
      break;

    case N_CPUS_OF_PLATFORM:
      if (value == null) {
        unsetN_cpus_of_platform();
      } else {
        setN_cpus_of_platform((Integer)value);
      }
      break;

    case N_TASKS:
      if (value == null) {
        unsetN_tasks();
      } else {
        setN_tasks((Integer)value);
      }
      break;

    case N_USERS_OF_TASKS:
      if (value == null) {
        unsetN_users_of_tasks();
      } else {
        setN_users_of_tasks((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return getCode();

    case COMPANY:
      return getCompany();

    case EXPIRED_DATE:
      return getExpired_date();

    case N_DAYS:
      return getN_days();

    case N_REMAINDER_DAYS:
      return getN_remainder_days();

    case N_CPUS:
      return getN_cpus();

    case N_USERS:
      return getN_users();

    case N_ONLINE_USERS:
      return getN_online_users();

    case N_CPUS_OF_PLATFORM:
      return getN_cpus_of_platform();

    case N_TASKS:
      return getN_tasks();

    case N_USERS_OF_TASKS:
      return getN_users_of_tasks();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCode();
    case COMPANY:
      return isSetCompany();
    case EXPIRED_DATE:
      return isSetExpired_date();
    case N_DAYS:
      return isSetN_days();
    case N_REMAINDER_DAYS:
      return isSetN_remainder_days();
    case N_CPUS:
      return isSetN_cpus();
    case N_USERS:
      return isSetN_users();
    case N_ONLINE_USERS:
      return isSetN_online_users();
    case N_CPUS_OF_PLATFORM:
      return isSetN_cpus_of_platform();
    case N_TASKS:
      return isSetN_tasks();
    case N_USERS_OF_TASKS:
      return isSetN_users_of_tasks();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof License)
      return this.equals((License)that);
    return false;
  }

  public boolean equals(License that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_company = true && this.isSetCompany();
    boolean that_present_company = true && that.isSetCompany();
    if (this_present_company || that_present_company) {
      if (!(this_present_company && that_present_company))
        return false;
      if (!this.company.equals(that.company))
        return false;
    }

    boolean this_present_expired_date = true && this.isSetExpired_date();
    boolean that_present_expired_date = true && that.isSetExpired_date();
    if (this_present_expired_date || that_present_expired_date) {
      if (!(this_present_expired_date && that_present_expired_date))
        return false;
      if (!this.expired_date.equals(that.expired_date))
        return false;
    }

    boolean this_present_n_days = true;
    boolean that_present_n_days = true;
    if (this_present_n_days || that_present_n_days) {
      if (!(this_present_n_days && that_present_n_days))
        return false;
      if (this.n_days != that.n_days)
        return false;
    }

    boolean this_present_n_remainder_days = true;
    boolean that_present_n_remainder_days = true;
    if (this_present_n_remainder_days || that_present_n_remainder_days) {
      if (!(this_present_n_remainder_days && that_present_n_remainder_days))
        return false;
      if (this.n_remainder_days != that.n_remainder_days)
        return false;
    }

    boolean this_present_n_cpus = true;
    boolean that_present_n_cpus = true;
    if (this_present_n_cpus || that_present_n_cpus) {
      if (!(this_present_n_cpus && that_present_n_cpus))
        return false;
      if (this.n_cpus != that.n_cpus)
        return false;
    }

    boolean this_present_n_users = true;
    boolean that_present_n_users = true;
    if (this_present_n_users || that_present_n_users) {
      if (!(this_present_n_users && that_present_n_users))
        return false;
      if (this.n_users != that.n_users)
        return false;
    }

    boolean this_present_n_online_users = true;
    boolean that_present_n_online_users = true;
    if (this_present_n_online_users || that_present_n_online_users) {
      if (!(this_present_n_online_users && that_present_n_online_users))
        return false;
      if (this.n_online_users != that.n_online_users)
        return false;
    }

    boolean this_present_n_cpus_of_platform = true;
    boolean that_present_n_cpus_of_platform = true;
    if (this_present_n_cpus_of_platform || that_present_n_cpus_of_platform) {
      if (!(this_present_n_cpus_of_platform && that_present_n_cpus_of_platform))
        return false;
      if (this.n_cpus_of_platform != that.n_cpus_of_platform)
        return false;
    }

    boolean this_present_n_tasks = true;
    boolean that_present_n_tasks = true;
    if (this_present_n_tasks || that_present_n_tasks) {
      if (!(this_present_n_tasks && that_present_n_tasks))
        return false;
      if (this.n_tasks != that.n_tasks)
        return false;
    }

    boolean this_present_n_users_of_tasks = true;
    boolean that_present_n_users_of_tasks = true;
    if (this_present_n_users_of_tasks || that_present_n_users_of_tasks) {
      if (!(this_present_n_users_of_tasks && that_present_n_users_of_tasks))
        return false;
      if (this.n_users_of_tasks != that.n_users_of_tasks)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
    if (isSetCode())
      hashCode = hashCode * 8191 + code.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompany()) ? 131071 : 524287);
    if (isSetCompany())
      hashCode = hashCode * 8191 + company.hashCode();

    hashCode = hashCode * 8191 + ((isSetExpired_date()) ? 131071 : 524287);
    if (isSetExpired_date())
      hashCode = hashCode * 8191 + expired_date.hashCode();

    hashCode = hashCode * 8191 + n_days;

    hashCode = hashCode * 8191 + n_remainder_days;

    hashCode = hashCode * 8191 + n_cpus;

    hashCode = hashCode * 8191 + n_users;

    hashCode = hashCode * 8191 + n_online_users;

    hashCode = hashCode * 8191 + n_cpus_of_platform;

    hashCode = hashCode * 8191 + n_tasks;

    hashCode = hashCode * 8191 + n_users_of_tasks;

    return hashCode;
  }

  @Override
  public int compareTo(License other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompany()).compareTo(other.isSetCompany());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompany()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company, other.company);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpired_date()).compareTo(other.isSetExpired_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpired_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expired_date, other.expired_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_days()).compareTo(other.isSetN_days());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_days()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n_days, other.n_days);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_remainder_days()).compareTo(other.isSetN_remainder_days());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_remainder_days()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n_remainder_days, other.n_remainder_days);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_cpus()).compareTo(other.isSetN_cpus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_cpus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n_cpus, other.n_cpus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_users()).compareTo(other.isSetN_users());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_users()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n_users, other.n_users);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_online_users()).compareTo(other.isSetN_online_users());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_online_users()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n_online_users, other.n_online_users);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_cpus_of_platform()).compareTo(other.isSetN_cpus_of_platform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_cpus_of_platform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n_cpus_of_platform, other.n_cpus_of_platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_tasks()).compareTo(other.isSetN_tasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_tasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n_tasks, other.n_tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetN_users_of_tasks()).compareTo(other.isSetN_users_of_tasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetN_users_of_tasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.n_users_of_tasks, other.n_users_of_tasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("License(");
    boolean first = true;

    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("company:");
    if (this.company == null) {
      sb.append("null");
    } else {
      sb.append(this.company);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expired_date:");
    if (this.expired_date == null) {
      sb.append("null");
    } else {
      sb.append(this.expired_date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("n_days:");
    sb.append(this.n_days);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n_remainder_days:");
    sb.append(this.n_remainder_days);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n_cpus:");
    sb.append(this.n_cpus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n_users:");
    sb.append(this.n_users);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n_online_users:");
    sb.append(this.n_online_users);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n_cpus_of_platform:");
    sb.append(this.n_cpus_of_platform);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n_tasks:");
    sb.append(this.n_tasks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("n_users_of_tasks:");
    sb.append(this.n_users_of_tasks);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LicenseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LicenseStandardScheme getScheme() {
      return new LicenseStandardScheme();
    }
  }

  private static class LicenseStandardScheme extends org.apache.thrift.scheme.StandardScheme<License> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, License struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.company = iprot.readString();
              struct.setCompanyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXPIRED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expired_date = iprot.readString();
              struct.setExpired_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // N_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n_days = iprot.readI32();
              struct.setN_daysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // N_REMAINDER_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n_remainder_days = iprot.readI32();
              struct.setN_remainder_daysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // N_CPUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n_cpus = iprot.readI32();
              struct.setN_cpusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // N_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n_users = iprot.readI32();
              struct.setN_usersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // N_ONLINE_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n_online_users = iprot.readI32();
              struct.setN_online_usersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // N_CPUS_OF_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n_cpus_of_platform = iprot.readI32();
              struct.setN_cpus_of_platformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // N_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n_tasks = iprot.readI32();
              struct.setN_tasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // N_USERS_OF_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.n_users_of_tasks = iprot.readI32();
              struct.setN_users_of_tasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, License struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.company != null) {
        oprot.writeFieldBegin(COMPANY_FIELD_DESC);
        oprot.writeString(struct.company);
        oprot.writeFieldEnd();
      }
      if (struct.expired_date != null) {
        oprot.writeFieldBegin(EXPIRED_DATE_FIELD_DESC);
        oprot.writeString(struct.expired_date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(N_DAYS_FIELD_DESC);
      oprot.writeI32(struct.n_days);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_REMAINDER_DAYS_FIELD_DESC);
      oprot.writeI32(struct.n_remainder_days);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_CPUS_FIELD_DESC);
      oprot.writeI32(struct.n_cpus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_USERS_FIELD_DESC);
      oprot.writeI32(struct.n_users);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_ONLINE_USERS_FIELD_DESC);
      oprot.writeI32(struct.n_online_users);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_CPUS_OF_PLATFORM_FIELD_DESC);
      oprot.writeI32(struct.n_cpus_of_platform);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_TASKS_FIELD_DESC);
      oprot.writeI32(struct.n_tasks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(N_USERS_OF_TASKS_FIELD_DESC);
      oprot.writeI32(struct.n_users_of_tasks);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LicenseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LicenseTupleScheme getScheme() {
      return new LicenseTupleScheme();
    }
  }

  private static class LicenseTupleScheme extends org.apache.thrift.scheme.TupleScheme<License> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, License struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCode()) {
        optionals.set(0);
      }
      if (struct.isSetCompany()) {
        optionals.set(1);
      }
      if (struct.isSetExpired_date()) {
        optionals.set(2);
      }
      if (struct.isSetN_days()) {
        optionals.set(3);
      }
      if (struct.isSetN_remainder_days()) {
        optionals.set(4);
      }
      if (struct.isSetN_cpus()) {
        optionals.set(5);
      }
      if (struct.isSetN_users()) {
        optionals.set(6);
      }
      if (struct.isSetN_online_users()) {
        optionals.set(7);
      }
      if (struct.isSetN_cpus_of_platform()) {
        optionals.set(8);
      }
      if (struct.isSetN_tasks()) {
        optionals.set(9);
      }
      if (struct.isSetN_users_of_tasks()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetCompany()) {
        oprot.writeString(struct.company);
      }
      if (struct.isSetExpired_date()) {
        oprot.writeString(struct.expired_date);
      }
      if (struct.isSetN_days()) {
        oprot.writeI32(struct.n_days);
      }
      if (struct.isSetN_remainder_days()) {
        oprot.writeI32(struct.n_remainder_days);
      }
      if (struct.isSetN_cpus()) {
        oprot.writeI32(struct.n_cpus);
      }
      if (struct.isSetN_users()) {
        oprot.writeI32(struct.n_users);
      }
      if (struct.isSetN_online_users()) {
        oprot.writeI32(struct.n_online_users);
      }
      if (struct.isSetN_cpus_of_platform()) {
        oprot.writeI32(struct.n_cpus_of_platform);
      }
      if (struct.isSetN_tasks()) {
        oprot.writeI32(struct.n_tasks);
      }
      if (struct.isSetN_users_of_tasks()) {
        oprot.writeI32(struct.n_users_of_tasks);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, License struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.company = iprot.readString();
        struct.setCompanyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.expired_date = iprot.readString();
        struct.setExpired_dateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.n_days = iprot.readI32();
        struct.setN_daysIsSet(true);
      }
      if (incoming.get(4)) {
        struct.n_remainder_days = iprot.readI32();
        struct.setN_remainder_daysIsSet(true);
      }
      if (incoming.get(5)) {
        struct.n_cpus = iprot.readI32();
        struct.setN_cpusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.n_users = iprot.readI32();
        struct.setN_usersIsSet(true);
      }
      if (incoming.get(7)) {
        struct.n_online_users = iprot.readI32();
        struct.setN_online_usersIsSet(true);
      }
      if (incoming.get(8)) {
        struct.n_cpus_of_platform = iprot.readI32();
        struct.setN_cpus_of_platformIsSet(true);
      }
      if (incoming.get(9)) {
        struct.n_tasks = iprot.readI32();
        struct.setN_tasksIsSet(true);
      }
      if (incoming.get(10)) {
        struct.n_users_of_tasks = iprot.readI32();
        struct.setN_users_of_tasksIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

